--- draft-ietf-httpbis-semantics-latest.txt	2022-02-07 09:54:51.160191800 +0100
+++ rfc9110-to-be.txt	2022-02-12 10:44:36.316849300 +0100
@@ -2,17 +2,17 @@
 
 
 
-HTTP Working Group                                      R. Fielding, Ed.
-Internet-Draft                                                     Adobe
-Obsoletes: 2818, 7230, 7231, 7232, 7233, 7235,        M. Nottingham, Ed.
-           7538, 7615, 7694 (if approved)                         Fastly
-Updates: 3864 (if approved)                              J. Reschke, Ed.
-Intended status: Standards Track                              greenbytes
-Expires: 11 August 2022                                  7 February 2022
+Internet Engineering Task Force (IETF)                  R. Fielding, Ed.
+Request for Comments: 9110                                         Adobe
+STD: 97                                               M. Nottingham, Ed.
+Obsoletes: 2818, 7230, 7231, 7232, 7233, 7235,                    Fastly
+           7538, 7615, 7694                              J. Reschke, Ed.
+Updates: 3864                                                 greenbytes
+Category: Standards Track                                  February 2022
+ISSN: 2070-1721
 
 
                              HTTP Semantics
-                  draft-ietf-httpbis-semantics-latest
 
 Abstract
 
@@ -27,36 +27,19 @@
    This document updates RFC 3864 and obsoletes RFCs 2818, 7231, 7232,
    7233, 7235, 7538, 7615, 7694, and portions of 7230.
 
-Editorial Note
-
-   This note is to be removed before publishing as an RFC.
-
-   Discussion of this draft takes place on the HTTP working group
-   mailing list (ietf-http-wg@w3.org), which is archived at
-   <https://lists.w3.org/Archives/Public/ietf-http-wg/>.
-
-   Working Group information can be found at <https://httpwg.org/>;
-   source code and issues list for this draft can be found at
-   <https://github.com/httpwg/http-core>.
-
-   The changes in this draft are summarized in Appendix C.1.
-
 Status of This Memo
 
-   This Internet-Draft is submitted in full conformance with the
-   provisions of BCP 78 and BCP 79.
-
-   Internet-Drafts are working documents of the Internet Engineering
-   Task Force (IETF).  Note that other groups may also distribute
-   working documents as Internet-Drafts.  The list of current Internet-
-   Drafts is at https://datatracker.ietf.org/drafts/current/.
-
-   Internet-Drafts are draft documents valid for a maximum of six months
-   and may be updated, replaced, or obsoleted by other documents at any
-   time.  It is inappropriate to use Internet-Drafts as reference
-   material or to cite them other than as "work in progress."
+   This is an Internet Standards Track document.
 
-   This Internet-Draft will expire on 11 August 2022.
+   This document is a product of the Internet Engineering Task Force
+   (IETF).  It represents the consensus of the IETF community.  It has
+   received public review and has been approved for publication by the
+   Internet Engineering Steering Group (IESG).  Further information on
+   Internet Standards is available in Section 2 of RFC 7841.
+
+   Information about the current status of this document, any errata,
+   and how to provide feedback on it may be obtained at
+   https://www.rfc-editor.org/info/rfc9110.
 
 Copyright Notice
 
@@ -64,13 +47,14 @@
    document authors.  All rights reserved.
 
    This document is subject to BCP 78 and the IETF Trust's Legal
-   Provisions Relating to IETF Documents (https://trustee.ietf.org/
-   license-info) in effect on the date of publication of this document.
-   Please review these documents carefully, as they describe your rights
-   and restrictions with respect to this document.  Code Components
-   extracted from this document must include Revised BSD License text as
-   described in Section 4.e of the Trust Legal Provisions and are
-   provided without warranty as described in the Revised BSD License.
+   Provisions Relating to IETF Documents
+   (https://trustee.ietf.org/license-info) in effect on the date of
+   publication of this document.  Please review these documents
+   carefully, as they describe your rights and restrictions with respect
+   to this document.  Code Components extracted from this document must
+   include Revised BSD License text as described in Section 4.e of the
+   Trust Legal Provisions and are provided without warranty as described
+   in the Revised BSD License.
 
    This document may contain material from IETF Documents or IETF
    Contributions published or made publicly available before November
@@ -389,8 +373,6 @@
      B.7.  Changes from RFC 7538
      B.8.  Changes from RFC 7615
      B.9.  Changes from RFC 7694
-   Appendix C.  Change Log
-     C.1.  Since draft-ietf-httpbis-semantics-19
    Acknowledgements
    Index
    Authors' Addresses
@@ -566,8 +548,8 @@
 
    The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
    "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
-   "OPTIONAL" in this document are to be interpreted as described in BCP
-   14 [RFC2119] [RFC8174] when, and only when, they appear in all
+   "OPTIONAL" in this document are to be interpreted as described in
+   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
    capitals, as shown here.
 
    This specification targets conformance criteria according to the role
@@ -678,17 +660,17 @@
    future communication).
 
    While HTTP's core semantics don't change between protocol versions,
-   their expression "on the wire" can change, and so the HTTP version
-   number changes when incompatible changes are made to the wire format.
-   Additionally, HTTP allows incremental, backwards-compatible changes
-   to be made to the protocol without changing its version through the
-   use of defined extension points (Section 16).
+   the expression of them "on the wire" can change, and so the HTTP
+   version number changes when incompatible changes are made to the wire
+   format.  Additionally, HTTP allows incremental, backwards-compatible
+   changes to be made to the protocol without changing its version
+   through the use of defined extension points (Section 16).
 
    The protocol version as a whole indicates the sender's conformance
    with the set of requirements laid out in that version's corresponding
-   specification(s).  For example, the version "HTTP/1.1" is defined by
-   the combined specifications of this document, "HTTP Caching"
-   [CACHING], and "HTTP/1.1" [HTTP/1.1].
+   specification of HTTP.  For example, the version "HTTP/1.1" is
+   defined by the combined specifications of this document, "HTTP
+   Caching" [CACHING], and "HTTP/1.1" [HTTP/1.1].
 
    HTTP's major version number is incremented when an incompatible
    message syntax is introduced.  The minor number is incremented when
@@ -1949,8 +1931,8 @@
    HTTP source that might generate any of the date and time
    specifications defined by the Internet Message Format.
 
-      |  *Note:* HTTP requirements for timestamp formats apply only to
-      |  their usage within the protocol stream.  Implementations are
+      |  *Note:* HTTP requirements for the timestamp formats apply only
+      |  to their usage within the protocol stream.  Implementations are
       |  not required to use these formats for user presentation,
       |  request logging, etc.
 
@@ -2587,11 +2569,6 @@
    The "Connection" header field allows the sender to list desired
    control options for the current connection.
 
-     Connection        = #connection-option
-     connection-option = token
-
-   Connection options are case-insensitive.
-
    When a field aside from Connection is used to supply control
    information for or about the current connection, the sender MUST list
    the corresponding field name within the Connection header field.
@@ -2602,7 +2579,7 @@
    message is forwarded and, for each connection-option in this field,
    remove any header or trailer field(s) from the message with the same
    name as the connection-option, and then remove the Connection header
-   field itself (or replace it with the intermediary's own control
+   field itself (or replace it with the intermediary's own connection
    options for the forwarded message).
 
    Hence, the Connection header field provides a declarative way of
@@ -2613,9 +2590,9 @@
    to be deployed without fear that they will be blindly forwarded by
    older intermediaries.
 
-   Furthermore, intermediaries SHOULD remove or replace fields that are
-   known to require removal before forwarding, whether or not they
-   appear as a connection-option, after applying those fields'
+   Furthermore, intermediaries SHOULD remove or replace field(s) whose
+   semantics are known to require removal before forwarding, whether or
+   not they appear as a connection option, after applying those fields'
    semantics.  This includes but is not limited to:
 
    *  Proxy-Connection (Appendix C.2.2 of [HTTP/1.1])
@@ -2628,6 +2605,13 @@
 
    *  Upgrade (Section 7.8)
 
+   The Connection header field's value has the following grammar:
+
+     Connection        = #connection-option
+     connection-option = token
+
+   Connection options are case-insensitive.
+
    A sender MUST NOT send a connection option corresponding to a field
    that is intended for all recipients of the content.  For example,
    Cache-Control is never appropriate as a connection option
@@ -3018,7 +3002,7 @@
 8.3.2.  Charset
 
    HTTP uses "charset" names to indicate or negotiate the character
-   encoding scheme ([RFC6365], Section 2) of a textual representation.
+   encoding scheme ([RFC6365], Section 1.3) of a textual representation.
    In the fields defined by this document, charset names appear either
    in parameters (Content-Type), or, for Accept-Encoding, in the form of
    a plain token.  In both cases, charset names are matched case-
@@ -4542,7 +4526,7 @@
 
    An example is:
 
-   From: spider-admin@example.org
+   From: webmaster@example.org
 
    The From header field is rarely sent by non-robotic user agents.  A
    user agent SHOULD NOT send a From header field without explicit
@@ -4872,7 +4856,7 @@
    specified independently and ought to be registered within the
    "Hypertext Transfer Protocol (HTTP) Authentication Scheme Registry".
    For example, the "basic" and "digest" authentication schemes are
-   defined by RFC 7617 and RFC 7616, respectively.
+   defined by RFC 7617 [RFC7617] and RFC 7616 [RFC7616], respectively.
 
 11.2.  Authentication Parameters
 
@@ -5232,7 +5216,7 @@
    selecting from among the available representations is difficult to
    describe to a user agent, or when the server desires to send its
    "best guess" to the user agent along with the first response (when
-   that "best guess" is good enough for the user, this avoids the round
+   that "best guess" is good enough for the user, this avoids the round-
    trip delay of a subsequent request).  In order to improve the
    server's guess, a user agent MAY send request header fields that
    describe its preferences.
@@ -5578,11 +5562,10 @@
 
    An Accept-Encoding header field with a field value that is empty
    implies that the user agent does not want any content coding in
-   response.  If a non-empty Accept-Encoding header field is present in
-   a request and none of the available representations for the response
-   have a content coding that is listed as acceptable, the origin server
-   SHOULD send a response without any content coding unless the identity
-   coding is indicated as unacceptable.
+   response.  If an Accept-Encoding header field is present in a request
+   and none of the available representations for the response have a
+   content coding that is listed as acceptable, the origin server SHOULD
+   send a response without any content coding.
 
    When the Accept-Encoding header field is present in a response, it
    indicates what content codings the resource was willing to accept in
@@ -5722,7 +5705,7 @@
    Vary might be elided when an origin server considers variance in
    content selection to be less significant than Vary's performance
    impact on caching, particularly when reuse is already limited by
-   cache response directives (Section 5.2 of [CACHING]).
+   Cache-Control response directives (Section 5.2 of [CACHING]).
 
    There is no need to send the Authorization field name in Vary because
    reuse of that response for a different user is prohibited by the
@@ -5845,7 +5828,7 @@
    many authoring use cases, but comes with some risk if multiple user
    agents are making change requests that are very similar but not
    cooperative.  For example, multiple user agents writing to a common
-   resource as a semaphore (e.g., a non-atomic increment) are likely to
+   resource as a semaphore (e.g., a nonatomic increment) are likely to
    collide and potentially lose important state transitions.  For those
    kinds of resources, an origin server is better off being stringent in
    sending 412 for every failed precondition on an unsafe method.  In
@@ -6684,8 +6667,8 @@
    message body ([RFC2046], Section 5.1) with the media type of
    "multipart/byteranges".
 
-   The multipart/byteranges media type includes one or more body parts,
-   each with its own Content-Type and Content-Range fields.  The
+   The "multipart/byteranges" media type includes one or more body
+   parts, each with its own Content-Type and Content-Range fields.  The
    required boundary parameter specifies the boundary string used to
    separate each body part.
 
@@ -6758,8 +6741,8 @@
 
                             Macintosh file type code(s):  N/A
 
-   Person and email address to contact for further information:  See Aut
-      hors' Addresses section.
+   Person and email address to contact for further information:
+      See Authors' Addresses section
 
    Intended usage:  COMMON
 
@@ -6840,7 +6823,7 @@
 
 15.2.  Informational 1xx
 
-   The 1xx (Informational) class of status code indicates an interim
+   The "1xx (Informational)" class of status code indicates an interim
    response for communicating connection status or request progress
    prior to completing the requested action and sending a final
    response.  Since HTTP/1.0 did not define any 1xx status codes, a
@@ -6860,7 +6843,7 @@
 
 15.2.1.  100 Continue
 
-   The 100 (Continue) status code indicates that the initial part of a
+   The "100 (Continue)" status code indicates that the initial part of a
    request has been received and has not yet been rejected by the
    server.  The server intends to send a final response after the
    request has been fully received and acted upon.
@@ -6877,7 +6860,7 @@
 
 15.2.2.  101 Switching Protocols
 
-   The 101 (Switching Protocols) status code indicates that the server
+   The "101 (Switching Protocols)" status code indicates that the server
    understands and is willing to comply with the client's request, via
    the Upgrade header field (Section 7.8), for a change in the
    application protocol being used on this connection.  The server MUST
@@ -6892,12 +6875,12 @@
 
 15.3.  Successful 2xx
 
-   The 2xx (Successful) class of status code indicates that the client's
-   request was successfully received, understood, and accepted.
+   The "2xx (Successful)" class of status code indicates that the
+   client's request was successfully received, understood, and accepted.
 
 15.3.1.  200 OK
 
-   The 200 (OK) status code indicates that the request has succeeded.
+   The "200 (OK)" status code indicates that the request has succeeded.
    The content sent in a 200 response depends on the request method.
    For the methods defined by this specification, the intended meaning
    of the content can be summarized as:
@@ -6950,7 +6933,7 @@
 
 15.3.2.  201 Created
 
-   The 201 (Created) status code indicates that the request has been
+   The "201 (Created)" status code indicates that the request has been
    fulfilled and has resulted in one or more new resources being
    created.  The primary resource created by the request is identified
    by either a Location header field in the response or, if no Location
@@ -6964,7 +6947,7 @@
 
 15.3.3.  202 Accepted
 
-   The 202 (Accepted) status code indicates that the request has been
+   The "202 (Accepted)" status code indicates that the request has been
    accepted for processing, but the processing has not been completed.
    The request might or might not eventually be acted upon, as it might
    be disallowed when processing actually takes place.  There is no
@@ -6982,7 +6965,7 @@
 
 15.3.4.  203 Non-Authoritative Information
 
-   The 203 (Non-Authoritative Information) status code indicates that
+   The "203 (Non-Authoritative Information)" status code indicates that
    the request was successful but the enclosed content has been modified
    from that of the origin server's 200 (OK) response by a transforming
    proxy (Section 7.7).  This status code allows the proxy to notify
@@ -6997,7 +6980,7 @@
 
 15.3.5.  204 No Content
 
-   The 204 (No Content) status code indicates that the server has
+   The "204 (No Content)" status code indicates that the server has
    successfully fulfilled the request and that there is no additional
    content to send in the response content.  Metadata in the response
    header fields refer to the target resource and its selected
@@ -7031,7 +7014,7 @@
 
 15.3.6.  205 Reset Content
 
-   The 205 (Reset Content) status code indicates that the server has
+   The "205 (Reset Content)" status code indicates that the server has
    fulfilled the request and desires that the user agent reset the
    "document view", which caused the request to be sent, to its original
    state as received from the origin server.
@@ -7048,7 +7031,7 @@
 
 15.3.7.  206 Partial Content
 
-   The 206 (Partial Content) status code indicates that the server is
+   The "206 (Partial Content)" status code indicates that the server is
    successfully fulfilling a range request for the target resource by
    transferring one or more parts of the selected representation.
 
@@ -7107,7 +7090,7 @@
 15.3.7.2.  Multiple Parts
 
    If multiple parts are being transferred, the server generating the
-   206 response MUST generate "multipart/byteranges" content, as defined
+   206 response MUST generate multipart/byteranges content, as defined
    in Section 14.6, and a Content-Type header field containing the
    multipart/byteranges media type and its required boundary parameter.
    To avoid confusion with single-part responses, a server MUST NOT
@@ -7145,7 +7128,7 @@
    than the overhead of sending multiple parts, regardless of the order
    in which the corresponding range-spec appeared in the received Range
    header field.  Since the typical overhead between each part of a
-   multipart/byteranges is around 80 bytes, depending on the selected
+   "multipart/byteranges" is around 80 bytes, depending on the selected
    representation's media type and the chosen boundary parameter length,
    it can be less efficient to transfer many small disjoint parts than
    it is to transfer the entire selected representation.
@@ -7153,11 +7136,11 @@
    A server MUST NOT generate a multipart response to a request for a
    single range, since a client that does not request multiple parts
    might not support multipart responses.  However, a server MAY
-   generate a multipart/byteranges response with only a single body part
-   if multiple ranges were requested and only one range was found to be
-   satisfiable or only one range remained after coalescing.  A client
-   that cannot process a multipart/byteranges response MUST NOT generate
-   a request that asks for multiple ranges.
+   generate a "multipart/byteranges" response with only a single body
+   part if multiple ranges were requested and only one range was found
+   to be satisfiable or only one range remained after coalescing.  A
+   client that cannot process a multipart/byteranges response MUST NOT
+   generate a request that asks for multiple ranges.
 
    A server that generates a multipart response SHOULD send the parts in
    the same order that the corresponding range-spec appeared in the
@@ -7212,7 +7195,7 @@
 
 15.4.  Redirection 3xx
 
-   The 3xx (Redirection) class of status code indicates that further
+   The "3xx (Redirection)" class of status code indicates that further
    action needs to be taken by the user agent in order to fulfill the
    request.  There are several types of redirects:
 
@@ -7304,7 +7287,7 @@
 
 15.4.1.  300 Multiple Choices
 
-   The 300 (Multiple Choices) status code indicates that the target
+   The "300 (Multiple Choices)" status code indicates that the target
    resource has more than one representation, each with its own more
    specific identifier, and information about the alternatives is being
    provided so that the user (or user agent) can select a preferred
@@ -7347,7 +7330,7 @@
 
 15.4.2.  301 Moved Permanently
 
-   The 301 (Moved Permanently) status code indicates that the target
+   The "301 (Moved Permanently)" status code indicates that the target
    resource has been assigned a new permanent URI and any future
    references to this resource ought to use one of the enclosed URIs.
    The server is suggesting that a user agent with link-editing
@@ -7375,7 +7358,7 @@
 
 15.4.3.  302 Found
 
-   The 302 (Found) status code indicates that the target resource
+   The "302 (Found)" status code indicates that the target resource
    resides temporarily under a different URI.  Since the redirection
    might be altered on occasion, the client ought to continue to use the
    target URI for future requests.
@@ -7393,7 +7376,7 @@
 
 15.4.4.  303 See Other
 
-   The 303 (See Other) status code indicates that the server is
+   The "303 (See Other)" status code indicates that the server is
    redirecting the user agent to a different resource, as indicated by a
    URI in the Location header field, which is intended to provide an
    indirect response to the original request.  A user agent can perform
@@ -7426,7 +7409,7 @@
 
 15.4.5.  304 Not Modified
 
-   The 304 (Not Modified) status code indicates that a conditional GET
+   The "304 (Not Modified)" status code indicates that a conditional GET
    or HEAD request has been received and would have resulted in a 200
    (OK) response if it were not for the fact that the condition
    evaluated to false.  In other words, there is no need for the server
@@ -7459,8 +7442,9 @@
 
 15.4.6.  305 Use Proxy
 
-   The 305 (Use Proxy) status code was defined in a previous version of
-   this specification and is now deprecated (Appendix B of [RFC7231]).
+   The "305 (Use Proxy)" status code was defined in a previous version
+   of this specification and is now deprecated (Appendix B of
+   [RFC7231]).
 
 15.4.7.  306 (Unused)
 
@@ -7469,7 +7453,7 @@
 
 15.4.8.  307 Temporary Redirect
 
-   The 307 (Temporary Redirect) status code indicates that the target
+   The "307 (Temporary Redirect)" status code indicates that the target
    resource resides temporarily under a different URI and the user agent
    MUST NOT change the request method if it performs an automatic
    redirection to that URI.  Since the redirection can change over time,
@@ -7484,7 +7468,7 @@
 
 15.4.9.  308 Permanent Redirect
 
-   The 308 (Permanent Redirect) status code indicates that the target
+   The "308 (Permanent Redirect)" status code indicates that the target
    resource has been assigned a new permanent URI and any future
    references to this resource ought to use one of the enclosed URIs.
    The server is suggesting that a user agent with link-editing
@@ -7511,27 +7495,28 @@
 
 15.5.  Client Error 4xx
 
-   The 4xx (Client Error) class of status code indicates that the client
-   seems to have erred.  Except when responding to a HEAD request, the
-   server SHOULD send a representation containing an explanation of the
-   error situation, and whether it is a temporary or permanent
-   condition.  These status codes are applicable to any request method.
-   User agents SHOULD display any included representation to the user.
+   The "4xx (Client Error)" class of status code indicates that the
+   client seems to have erred.  Except when responding to a HEAD
+   request, the server SHOULD send a representation containing an
+   explanation of the error situation, and whether it is a temporary or
+   permanent condition.  These status codes are applicable to any
+   request method.  User agents SHOULD display any included
+   representation to the user.
 
 15.5.1.  400 Bad Request
 
-   The 400 (Bad Request) status code indicates that the server cannot or
-   will not process the request due to something that is perceived to be
-   a client error (e.g., malformed request syntax, invalid request
+   The "400 (Bad Request)" status code indicates that the server cannot
+   or will not process the request due to something that is perceived to
+   be a client error (e.g., malformed request syntax, invalid request
    message framing, or deceptive request routing).
 
 15.5.2.  401 Unauthorized
 
-   The 401 (Unauthorized) status code indicates that the request has not
-   been applied because it lacks valid authentication credentials for
-   the target resource.  The server generating a 401 response MUST send
-   a WWW-Authenticate header field (Section 11.6.1) containing at least
-   one challenge applicable to the target resource.
+   The "401 (Unauthorized)" status code indicates that the request has
+   not been applied because it lacks valid authentication credentials
+   for the target resource.  The server generating a 401 response MUST
+   send a WWW-Authenticate header field (Section 11.6.1) containing at
+   least one challenge applicable to the target resource.
 
    If the request included authentication credentials, then the 401
    response indicates that authorization has been refused for those
@@ -7544,14 +7529,14 @@
 
 15.5.3.  402 Payment Required
 
-   The 402 (Payment Required) status code is reserved for future use.
+   The "402 (Payment Required)" status code is reserved for future use.
 
 15.5.4.  403 Forbidden
 
-   The 403 (Forbidden) status code indicates that the server understood
-   the request but refuses to fulfill it.  A server that wishes to make
-   public why the request has been forbidden can describe that reason in
-   the response content (if any).
+   The "403 (Forbidden)" status code indicates that the server
+   understood the request but refuses to fulfill it.  A server that
+   wishes to make public why the request has been forbidden can describe
+   that reason in the response content (if any).
 
    If authentication credentials were provided in the request, the
    server considers them insufficient to grant access.  The client
@@ -7566,9 +7551,9 @@
 
 15.5.5.  404 Not Found
 
-   The 404 (Not Found) status code indicates that the origin server did
-   not find a current representation for the target resource or is not
-   willing to disclose that one exists.  A 404 status code does not
+   The "404 (Not Found)" status code indicates that the origin server
+   did not find a current representation for the target resource or is
+   not willing to disclose that one exists.  A 404 status code does not
    indicate whether this lack of representation is temporary or
    permanent; the 410 (Gone) status code is preferred over 404 if the
    origin server knows, presumably through some configurable means, that
@@ -7580,7 +7565,7 @@
 
 15.5.6.  405 Method Not Allowed
 
-   The 405 (Method Not Allowed) status code indicates that the method
+   The "405 (Method Not Allowed)" status code indicates that the method
    received in the request-line is known by the origin server but not
    supported by the target resource.  The origin server MUST generate an
    Allow header field in a 405 response containing a list of the target
@@ -7592,7 +7577,7 @@
 
 15.5.7.  406 Not Acceptable
 
-   The 406 (Not Acceptable) status code indicates that the target
+   The "406 (Not Acceptable)" status code indicates that the target
    resource does not have a current representation that would be
    acceptable to the user agent, according to the proactive negotiation
    header fields received in the request (Section 12.1), and the server
@@ -7608,8 +7593,8 @@
 
 15.5.8.  407 Proxy Authentication Required
 
-   The 407 (Proxy Authentication Required) status code is similar to 401
-   (Unauthorized), but it indicates that the client needs to
+   The "407 (Proxy Authentication Required)" status code is similar to
+   401 (Unauthorized), but it indicates that the client needs to
    authenticate itself in order to use a proxy for this request.  The
    proxy MUST send a Proxy-Authenticate header field (Section 11.7.1)
    containing a challenge applicable to that proxy for the request.  The
@@ -7618,7 +7603,7 @@
 
 15.5.9.  408 Request Timeout
 
-   The 408 (Request Timeout) status code indicates that the server did
+   The "408 (Request Timeout)" status code indicates that the server did
    not receive a complete request message within the time that it was
    prepared to wait.
 
@@ -7629,7 +7614,7 @@
 
 15.5.10.  409 Conflict
 
-   The 409 (Conflict) status code indicates that the request could not
+   The "409 (Conflict)" status code indicates that the request could not
    be completed due to a conflict with the current state of the target
    resource.  This code is used in situations where the user might be
    able to resolve the conflict and resubmit the request.  The server
@@ -7646,7 +7631,7 @@
 
 15.5.11.  410 Gone
 
-   The 410 (Gone) status code indicates that access to the target
+   The "410 (Gone)" status code indicates that access to the target
    resource is no longer available at the origin server and that this
    condition is likely to be permanent.  If the origin server does not
    know, or has no facility to determine, whether or not the condition
@@ -7669,7 +7654,7 @@
 
 15.5.12.  411 Length Required
 
-   The 411 (Length Required) status code indicates that the server
+   The "411 (Length Required)" status code indicates that the server
    refuses to accept the request without a defined Content-Length
    (Section 8.6).  The client MAY repeat the request if it adds a valid
    Content-Length header field containing the length of the request
@@ -7677,19 +7662,19 @@
 
 15.5.13.  412 Precondition Failed
 
-   The 412 (Precondition Failed) status code indicates that one or more
-   conditions given in the request header fields evaluated to false when
-   tested on the server (Section 13).  This response status code allows
-   the client to place preconditions on the current resource state (its
-   current representations and metadata) and, thus, prevent the request
-   method from being applied if the target resource is in an unexpected
-   state.
+   The "412 (Precondition Failed)" status code indicates that one or
+   more conditions given in the request header fields evaluated to false
+   when tested on the server (Section 13).  This response status code
+   allows the client to place preconditions on the current resource
+   state (its current representations and metadata) and, thus, prevent
+   the request method from being applied if the target resource is in an
+   unexpected state.
 
 15.5.14.  413 Content Too Large
 
-   The 413 (Content Too Large) status code indicates that the server is
-   refusing to process a request because the request content is larger
-   than the server is willing or able to process.  The server MAY
+   The "413 (Content Too Large)" status code indicates that the server
+   is refusing to process a request because the request content is
+   larger than the server is willing or able to process.  The server MAY
    terminate the request, if the protocol version in use allows it;
    otherwise, the server MAY close the connection.
 
@@ -7699,15 +7684,14 @@
 
 15.5.15.  414 URI Too Long
 
-   The 414 (URI Too Long) status code indicates that the server is
+   The "414 (URI Too Long)" status code indicates that the server is
    refusing to service the request because the target URI is longer than
    the server is willing to interpret.  This rare condition is only
    likely to occur when a client has improperly converted a POST request
    to a GET request with long query information, when the client has
-   descended into an infinite loop of redirection (e.g., a redirected
-   URI prefix that points to a suffix of itself), or when the server is
-   under attack by a client attempting to exploit potential security
-   holes.
+   descended into a "black hole" of redirection (e.g., a redirected URI
+   prefix that points to a suffix of itself) or when the server is under
+   attack by a client attempting to exploit potential security holes.
 
    A 414 response is heuristically cacheable; i.e., unless otherwise
    indicated by the method definition or explicit cache controls (see
@@ -7715,7 +7699,7 @@
 
 15.5.16.  415 Unsupported Media Type
 
-   The 415 (Unsupported Media Type) status code indicates that the
+   The "415 (Unsupported Media Type)" status code indicates that the
    origin server is refusing to service the request because the content
    is in a format not supported by this method on the target resource.
 
@@ -7734,8 +7718,8 @@
 
 15.5.17.  416 Range Not Satisfiable
 
-   The 416 (Range Not Satisfiable) status code indicates that the set of
-   ranges in the request's Range header field (Section 14.2) has been
+   The "416 (Range Not Satisfiable)" status code indicates that the set
+   of ranges in the request's Range header field (Section 14.2) has been
    rejected either because none of the requested ranges are satisfiable
    or because the client has requested an excessive number of small or
    overlapping ranges (a potential denial of service attack).
@@ -7766,7 +7750,7 @@
 
 15.5.18.  417 Expectation Failed
 
-   The 417 (Expectation Failed) status code indicates that the
+   The "417 (Expectation Failed)" status code indicates that the
    expectation given in the request's Expect header field
    (Section 10.1.1) could not be met by at least one of the inbound
    servers.
@@ -7779,21 +7763,21 @@
    has been widely implemented as an "Easter egg" and therefore is
    effectively consumed by this use.
 
-   Therefore, the 418 status code is reserved in the IANA HTTP Status
-   Code Registry.  This indicates that the status code cannot be
-   assigned to other applications currently.  If future circumstances
-   require its use (e.g., exhaustion of 4NN status codes), it can be re-
-   assigned to another use.
+   Therefore, the 418 status code is reserved in the IANA "Hypertext
+   Transfer Protocol (HTTP) Status Code Registry".  This indicates that
+   the status code cannot be assigned to other applications currently.
+   If future circumstances require its use (e.g., exhaustion of 4NN
+   status codes), it can be re-assigned to another use.
 
 15.5.20.  421 Misdirected Request
 
-   The 421 (Misdirected Request) status code indicates that the request
-   was directed at a server that is unable or unwilling to produce an
-   authoritative response for the target URI.  An origin server (or
-   gateway acting on behalf of the origin server) sends 421 to reject a
-   target URI that does not match an origin for which the server has
-   been configured (Section 4.3.1) or does not match the connection
-   context over which the request was received (Section 7.4).
+   The "421 (Misdirected Request)" status code indicates that the
+   request was directed at a server that is unable or unwilling to
+   produce an authoritative response for the target URI.  An origin
+   server (or gateway acting on behalf of the origin server) sends 421
+   to reject a target URI that does not match an origin for which the
+   server has been configured (Section 4.3.1) or does not match the
+   connection context over which the request was received (Section 7.4).
 
    A client that receives a 421 (Misdirected Request) response MAY retry
    the request, whether or not the request method is idempotent, over a
@@ -7804,9 +7788,9 @@
 
 15.5.21.  422 Unprocessable Content
 
-   The 422 (Unprocessable Content) status code indicates that the server
-   understands the content type of the request content (hence a 415
-   (Unsupported Media Type) status code is inappropriate), and the
+   The "422 (Unprocessable Content)" status code indicates that the
+   server understands the content type of the request content (hence a
+   415 (Unsupported Media Type) status code is inappropriate), and the
    syntax of the request content is correct, but it was unable to
    process the contained instructions.  For example, this status code
    can be sent if an XML request content contains well-formed (i.e.,
@@ -7814,7 +7798,7 @@
 
 15.5.22.  426 Upgrade Required
 
-   The 426 (Upgrade Required) status code indicates that the server
+   The "426 (Upgrade Required)" status code indicates that the server
    refuses to perform the request using the current protocol but might
    be willing to do so after the client upgrades to a different
    protocol.  The server MUST send an Upgrade header field in a 426
@@ -7832,8 +7816,8 @@
 
 15.6.  Server Error 5xx
 
-   The 5xx (Server Error) class of status code indicates that the server
-   is aware that it has erred or is incapable of performing the
+   The "5xx (Server Error)" class of status code indicates that the
+   server is aware that it has erred or is incapable of performing the
    requested method.  Except when responding to a HEAD request, the
    server SHOULD send a representation containing an explanation of the
    error situation, and whether it is a temporary or permanent
@@ -7843,16 +7827,17 @@
 
 15.6.1.  500 Internal Server Error
 
-   The 500 (Internal Server Error) status code indicates that the server
-   encountered an unexpected condition that prevented it from fulfilling
-   the request.
+   The "500 (Internal Server Error)" status code indicates that the
+   server encountered an unexpected condition that prevented it from
+   fulfilling the request.
 
 15.6.2.  501 Not Implemented
 
-   The 501 (Not Implemented) status code indicates that the server does
-   not support the functionality required to fulfill the request.  This
-   is the appropriate response when the server does not recognize the
-   request method and is not capable of supporting it for any resource.
+   The "501 (Not Implemented)" status code indicates that the server
+   does not support the functionality required to fulfill the request.
+   This is the appropriate response when the server does not recognize
+   the request method and is not capable of supporting it for any
+   resource.
 
    A 501 response is heuristically cacheable; i.e., unless otherwise
    indicated by the method definition or explicit cache controls (see
@@ -7860,13 +7845,13 @@
 
 15.6.3.  502 Bad Gateway
 
-   The 502 (Bad Gateway) status code indicates that the server, while
+   The "502 (Bad Gateway)" status code indicates that the server, while
    acting as a gateway or proxy, received an invalid response from an
    inbound server it accessed while attempting to fulfill the request.
 
 15.6.4.  503 Service Unavailable
 
-   The 503 (Service Unavailable) status code indicates that the server
+   The "503 (Service Unavailable)" status code indicates that the server
    is currently unable to handle the request due to a temporary overload
    or scheduled maintenance, which will likely be alleviated after some
    delay.  The server MAY send a Retry-After header field
@@ -7879,14 +7864,14 @@
 
 15.6.5.  504 Gateway Timeout
 
-   The 504 (Gateway Timeout) status code indicates that the server,
+   The "504 (Gateway Timeout)" status code indicates that the server,
    while acting as a gateway or proxy, did not receive a timely response
    from an upstream server it needed to access in order to complete the
    request.
 
 15.6.6.  505 HTTP Version Not Supported
 
-   The 505 (HTTP Version Not Supported) status code indicates that the
+   The "505 (HTTP Version Not Supported)" status code indicates that the
    server does not support, or refuses to support, the major version of
    HTTP that was used in the request message.  The server is indicating
    that it is unable or unwilling to complete the request using the same
@@ -8050,7 +8035,7 @@
    information; however, those status codes that are defined as being
    heuristically cacheable are allowed to be cached without explicit
    freshness information.  Likewise, the definition of a status code can
-   place constraints upon cache behavior if the "must-understand" cache
+   place constraints upon cache behavior if the must-understand cache
    directive is used.  See [CACHING] for more information.
 
    Finally, the definition of a new status code ought to indicate
@@ -8123,12 +8108,12 @@
    registry, in consultation with the community.
 
    Standards-defined names have a status of "permanent".  Other names
-   can also be registered as permanent if the expert(s) finds that they
+   can also be registered as permanent if the expert(s) find that they
    are in use, in consultation with the community.  Other names should
    be registered as "provisional".
 
    Provisional entries can be removed by the expert(s) if -- in
-   consultation with the community -- the expert(s) find that they are
+   consultation with the community -- the expert(s) finds that they are
    not in use.  The expert(s) can change a provisional entry's status to
    permanent at any time.
 
@@ -8139,7 +8124,7 @@
 
 16.3.2.  Considerations for New Fields
 
-   HTTP header and trailer fields are a widely used extension point for
+   HTTP header and trailer fields are widely used extension points for
    the protocol.  While they can be used in an ad hoc fashion, fields
    that are intended for wider use need to be carefully documented to
    ensure interoperability.
@@ -8328,14 +8313,15 @@
 
    *  The credentials carried in an Authorization header field are
       specific to the user agent and, therefore, have the same effect on
-      HTTP caches as the "private" cache response directive
+      HTTP caches as the private Cache-Control response directive
       (Section 5.2.2.7 of [CACHING]), within the scope of the request in
       which they appear.
 
       Therefore, new authentication schemes that choose not to carry
       credentials in the Authorization header field (e.g., using a newly
       defined header field) will need to explicitly disallow caching, by
-      mandating the use of cache response directives (e.g., "private").
+      mandating the use of Cache-Control response directives (e.g.,
+      private).
 
    *  Schemes using Authentication-Info, Proxy-Authentication-Info, or
       any other authentication related response header field need to
@@ -8950,7 +8936,7 @@
 18.  IANA Considerations
 
    The change controller for the following registrations is: "IETF
-   (iesg@ietf.org) - Internet Engineering Task Force".
+   (iesg@ietf.org) -- Internet Engineering Task Force".
 
 18.1.  URI Scheme Registration
 
@@ -9258,24 +9244,24 @@
    registration procedure of Section 16.6.1 and the content coding names
    summarized in the table below.
 
-   +============+=========================================+=========+
-   | Name       | Description                             | Ref.    |
-   +============+=========================================+=========+
-   | compress   | UNIX "compress" data format [Welch]     | 8.4.1.1 |
-   +------------+-----------------------------------------+---------+
-   | deflate    | "deflate" compressed data [RFC1951]     | 8.4.1.2 |
-   |            | inside the "zlib" data format [RFC1950] |         |
-   +------------+-----------------------------------------+---------+
-   | gzip       | GZIP file format [RFC1952]              | 8.4.1.3 |
-   +------------+-----------------------------------------+---------+
-   | identity   | Reserved                                | 12.5.3  |
-   +------------+-----------------------------------------+---------+
-   | x-compress | Deprecated (alias for compress)         | 8.4.1.1 |
-   +------------+-----------------------------------------+---------+
-   | x-gzip     | Deprecated (alias for gzip)             | 8.4.1.3 |
-   +------------+-----------------------------------------+---------+
+   +============+===========================================+=========+
+   | Name       | Description                               | Ref.    |
+   +============+===========================================+=========+
+   | compress   | UNIX "compress" data format [Welch]       | 8.4.1.1 |
+   +------------+-------------------------------------------+---------+
+   | deflate    | "deflate" compressed data ([RFC1951])     | 8.4.1.2 |
+   |            | inside the "zlib" data format ([RFC1950]) |         |
+   +------------+-------------------------------------------+---------+
+   | gzip       | GZIP file format [RFC1952]                | 8.4.1.3 |
+   +------------+-------------------------------------------+---------+
+   | identity   | Reserved                                  | 12.5.3  |
+   +------------+-------------------------------------------+---------+
+   | x-compress | Deprecated (alias for compress)           | 8.4.1.1 |
+   +------------+-------------------------------------------+---------+
+   | x-gzip     | Deprecated (alias for gzip)               | 8.4.1.3 |
+   +------------+-------------------------------------------+---------+
 
-                                Table 10
+                                 Table 10
 
 18.7.  Range Unit Registration
 
@@ -9338,10 +9324,8 @@
 19.1.  Normative References
 
    [CACHING]  Fielding, R., Ed., Nottingham, M., Ed., and J. Reschke,
-              Ed., "HTTP Caching", Work in Progress, Internet-Draft,
-              draft-ietf-httpbis-cache-latest, February 2022,
-              <https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-
-              cache-latest>.
+              Ed., "HTTP Caching", RFC 9111, DOI 10.17487/RFC9111,
+              February 2022, <https://www.rfc-editor.org/info/rfc9111>.
 
    [RFC1950]  Deutsch, P. and J-L. Gailly, "ZLIB Compressed Data Format
               Specification version 3.3", RFC 1950,
@@ -9441,15 +9425,10 @@
               Alternative Services", RFC 7838, DOI 10.17487/RFC7838,
               April 2016, <https://www.rfc-editor.org/info/rfc7838>.
 
-   [BCP13]    Freed, N. and J. Klensin, "Multipurpose Internet Mail
-              Extensions (MIME) Part Four: Registration Procedures",
-              BCP 13, RFC 4289, December 2005.
-
-              Freed, N., Klensin, J., and T. Hansen, "Media Type
+   [BCP13]    Freed, N., Klensin, J., and T. Hansen, "Media Type
               Specifications and Registration Procedures", BCP 13,
-              RFC 6838, January 2013.
-
-              <https://www.rfc-editor.org/info/bcp13>
+              RFC 6838, January 2013,
+              <https://www.rfc-editor.org/info/bcp13>.
 
    [BCP178]   Saint-Andre, P., Crocker, D., and M. Nottingham,
               "Deprecating the "X-" Prefix and Similar Constructs in
@@ -9502,10 +9481,8 @@
               <https://www.rfc-editor.org/info/rfc1945>.
 
    [HTTP/1.1] Fielding, R., Ed., Nottingham, M., Ed., and J. Reschke,
-              Ed., "HTTP/1.1", Work in Progress, Internet-Draft, draft-
-              ietf-httpbis-messaging-latest, February 2022,
-              <https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-
-              messaging-latest>.
+              Ed., "HTTP/1.1", RFC 9112, DOI 10.17487/RFC9112, February
+              2022, <https://www.rfc-editor.org/info/rfc9112>.
 
    [HTTP/2]   Belshe, M., Peon, R., and M. Thomson, Ed., "Hypertext
               Transfer Protocol Version 2 (HTTP/2)", RFC 7540,
@@ -9513,10 +9490,8 @@
               <https://www.rfc-editor.org/info/rfc7540>.
 
    [HTTP/3]   Bishop, M., Ed., "Hypertext Transfer Protocol Version 3
-              (HTTP/3)", Work in Progress, Internet-Draft, draft-ietf-
-              quic-http-34, 2 February 2021,
-              <https://datatracker.ietf.org/doc/html/draft-ietf-quic-
-              http-34>.
+              (HTTP/3)", RFC 9114, DOI 10.17487/RFC9113, February 2022,
+              <https://www.rfc-editor.org/info/rfc9114>.
 
    [ISO-8859-1]
               International Organization for Standardization,
@@ -10019,8 +9994,8 @@
    recommended.  (Section 3.1)
 
    The following have been clarified: CR and NUL in field values are to
-   be rejected or mapped to SP, and leading and trailing whitespace
-   needs to be stripped from field values before they are consumed.
+   be rejected or mapped to SP, and leading and trailing whitespaces
+   need to be stripped from field values before they are consumed.
    (Section 5.5)
 
    Parameters in media type, media range, and expectation can be empty
@@ -10153,30 +10128,6 @@
    This specification includes the extension defined in [RFC7694] but
    leaves out examples and deployment considerations.
 
-Appendix C.  Change Log
-
-   This section is to be removed before publishing as an RFC.
-
-   See <https://www.ietf.org/archive/id/draft-ietf-httpbis-semantics-
-   19.html#appendix-C> for changes up to version 19 of this document.
-
-C.1.  Since draft-ietf-httpbis-semantics-19
-
-   This (unpublished) draft contains changes that were made after draft
-   19 was approved by the IESG.  Most changes are editorial only.
-   Furthermore:
-
-   *  In Section 16.3.1, add states 'obsoleted' and 'deprecated'; in
-      Section 18.4, change status 'standard' to 'permanent'
-      (<https://github.com/httpwg/http-core/issues/978>)
-
-   *  In Section 12.5.3, slightly relax requirements for handling
-      Accept-Encoding field values (<https://github.com/httpwg/http-
-      core/issues/980>)
-
-   *  In Section 18.4, update IANA instructions based on received
-      feedback (<https://github.com/httpwg/http-core/issues/982>)
-
 Acknowledgements
 
    Aside from the current editors, the following individuals deserve
@@ -10190,11 +10141,13 @@
    Henrik Frystyk Nielsen, Dave Raggett, Eric Rescorla, Tony Sanders,
    Lawrence C. Stewart, Marc VanHeyningen, and Steve Zilles.
 
-   This edition builds on the many contributions that went into past
-   specifications of HTTP, including RFC 1945, RFC 2068, RFC 2145, RFC
-   2616, RFC 2617, RFC 2818, RFC 7230, RFC 7231, RFC 7232, RFC 7233, RFC
-   7234, and RFC 7235.  The acknowledgements within those documents
-   still apply.
+   This document builds on the many contributions that went into past
+   specifications of HTTP, including RFC 1945 [HTTP/1.0], RFC 2068
+   [RFC2068], RFC 2145 [RFC2145], RFC 2616 [RFC2616], RFC 2617
+   [RFC2617], RFC 2818 [RFC2818], RFC 7230 [RFC7230], RFC 7231
+   [RFC7231], RFC 7232 [RFC7232], RFC 7233 [RFC7233], RFC 7234
+   [RFC7234], and RFC 7235 [RFC7235].  The acknowledgements within those
+   documents still apply.
 
    Since 2014, the following contributors have helped improve this
    specification by reporting bugs, asking smart questions, drafting or
@@ -10721,12 +10674,11 @@
 
          TE header field  Section 10.1.4
          TRACE method  Section 9.3.8
-         Trailer Fields
+         Trailer Fields  Section 6.5
             ETag  Section 8.8.3
          Trailer header field  Section 6.6.2
          target URI  Section 7.1
          target resource  Section 7.1
-         trailer fields  Section 6.5
          trailer section  Section 6.5
          trailers  Section 6.5
          transforming proxy  Section 7.7
