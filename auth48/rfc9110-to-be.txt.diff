--- draft-ietf-httpbis-semantics-latest.txt	2022-01-28 07:20:32.055314500 +0100
+++ rfc9110-to-be.txt	2022-01-28 07:20:11.292315900 +0100
@@ -2,17 +2,17 @@
 
 
 
-HTTP Working Group                                      R. Fielding, Ed.
-Internet-Draft                                                     Adobe
-Obsoletes: 2818, 7230, 7231, 7232, 7233, 7235,        M. Nottingham, Ed.
-           7538, 7615, 7694 (if approved)                         Fastly
-Updates: 3864 (if approved)                              J. Reschke, Ed.
-Intended status: Standards Track                              greenbytes
-Expires: 1 August 2022                                   28 January 2022
+Internet Engineering Task Force (IETF)                  R. Fielding, Ed.
+Request for Comments: 9110                                         Adobe
+STD: 97                                               M. Nottingham, Ed.
+Obsoletes: 2818, 7230, 7231, 7232, 7233, 7235,                    Fastly
+           7538, 7615, 7694                              J. Reschke, Ed.
+Updates: 3864                                                 greenbytes
+Category: Standards Track                                   January 2022
+ISSN: 2070-1721
 
 
                              HTTP Semantics
-                  draft-ietf-httpbis-semantics-latest
 
 Abstract
 
@@ -27,36 +27,19 @@
    This document updates RFC 3864 and obsoletes RFCs 2818, 7231, 7232,
    7233, 7235, 7538, 7615, 7694, and portions of 7230.
 
-Editorial Note
-
-   This note is to be removed before publishing as an RFC.
-
-   Discussion of this draft takes place on the HTTP working group
-   mailing list (ietf-http-wg@w3.org), which is archived at
-   <https://lists.w3.org/Archives/Public/ietf-http-wg/>.
-
-   Working Group information can be found at <https://httpwg.org/>;
-   source code and issues list for this draft can be found at
-   <https://github.com/httpwg/http-core>.
-
-   The changes in this draft are summarized in Appendix C.1.
-
 Status of This Memo
 
-   This Internet-Draft is submitted in full conformance with the
-   provisions of BCP 78 and BCP 79.
+   This is an Internet Standards Track document.
 
-   Internet-Drafts are working documents of the Internet Engineering
-   Task Force (IETF).  Note that other groups may also distribute
-   working documents as Internet-Drafts.  The list of current Internet-
-   Drafts is at https://datatracker.ietf.org/drafts/current/.
-
-   Internet-Drafts are draft documents valid for a maximum of six months
-   and may be updated, replaced, or obsoleted by other documents at any
-   time.  It is inappropriate to use Internet-Drafts as reference
-   material or to cite them other than as "work in progress."
-
-   This Internet-Draft will expire on 1 August 2022.
+   This document is a product of the Internet Engineering Task Force
+   (IETF).  It represents the consensus of the IETF community.  It has
+   received public review and has been approved for publication by the
+   Internet Engineering Steering Group (IESG).  Further information on
+   Internet Standards is available in Section 2 of RFC 7841.
+
+   Information about the current status of this document, any errata,
+   and how to provide feedback on it may be obtained at
+   https://www.rfc-editor.org/info/rfc9110.
 
 Copyright Notice
 
@@ -64,13 +47,14 @@
    document authors.  All rights reserved.
 
    This document is subject to BCP 78 and the IETF Trust's Legal
-   Provisions Relating to IETF Documents (https://trustee.ietf.org/
-   license-info) in effect on the date of publication of this document.
-   Please review these documents carefully, as they describe your rights
-   and restrictions with respect to this document.  Code Components
-   extracted from this document must include Revised BSD License text as
-   described in Section 4.e of the Trust Legal Provisions and are
-   provided without warranty as described in the Revised BSD License.
+   Provisions Relating to IETF Documents
+   (https://trustee.ietf.org/license-info) in effect on the date of
+   publication of this document.  Please review these documents
+   carefully, as they describe your rights and restrictions with respect
+   to this document.  Code Components extracted from this document must
+   include Revised BSD License text as described in Section 4.e of the
+   Trust Legal Provisions and are provided without warranty as described
+   in the Revised BSD License.
 
    This document may contain material from IETF Documents or IETF
    Contributions published or made publicly available before November
@@ -389,8 +373,6 @@
      B.7.  Changes from RFC 7538
      B.8.  Changes from RFC 7615
      B.9.  Changes from RFC 7694
-   Appendix C.  Change Log
-     C.1.  Since draft-ietf-httpbis-semantics-19
    Acknowledgements
    Index
    Authors' Addresses
@@ -496,37 +478,35 @@
    Semantics also include representation metadata that describe how
    content is intended to be interpreted by a recipient, request header
    fields that might influence content selection, and the various
-   selection algorithms that are collectively referred to as content
-   negotiation (Section 12).
+   selection algorithms that are collectively referred to as _content
+   negotiation_ (Section 12).
 
 1.4.  Specifications Obsoleted by This Document
 
-   This document obsoletes the following specifications:
-
-   +============================================+===========+=========+
-   | Title                                      | Reference | Changes |
-   +============================================+===========+=========+
-   | HTTP Over TLS                              | [RFC2818] | B.1     |
-   +--------------------------------------------+-----------+---------+
-   | HTTP/1.1 Message Syntax and Routing [*]    | [RFC7230] | B.2     |
-   +--------------------------------------------+-----------+---------+
-   | HTTP/1.1 Semantics and Content             | [RFC7231] | B.3     |
-   +--------------------------------------------+-----------+---------+
-   | HTTP/1.1 Conditional Requests              | [RFC7232] | B.4     |
-   +--------------------------------------------+-----------+---------+
-   | HTTP/1.1 Range Requests                    | [RFC7233] | B.5     |
-   +--------------------------------------------+-----------+---------+
-   | HTTP/1.1 Authentication                    | [RFC7235] | B.6     |
-   +--------------------------------------------+-----------+---------+
-   | HTTP Status Code 308 (Permanent Redirect)  | [RFC7538] | B.7     |
-   +--------------------------------------------+-----------+---------+
-   | HTTP Authentication-Info and Proxy-        | [RFC7615] | B.8     |
-   | Authentication-Info Response Header Fields |           |         |
-   +--------------------------------------------+-----------+---------+
-   | HTTP Client-Initiated Content-Encoding     | [RFC7694] | B.9     |
-   +--------------------------------------------+-----------+---------+
+   +============================================+===========+=====+
+   | Title                                      | Reference | See |
+   +============================================+===========+=====+
+   | HTTP Over TLS                              | [RFC2818] | B.1 |
+   +--------------------------------------------+-----------+-----+
+   | HTTP/1.1 Message Syntax and Routing [*]    | [RFC7230] | B.2 |
+   +--------------------------------------------+-----------+-----+
+   | HTTP/1.1 Semantics and Content             | [RFC7231] | B.3 |
+   +--------------------------------------------+-----------+-----+
+   | HTTP/1.1 Conditional Requests              | [RFC7232] | B.4 |
+   +--------------------------------------------+-----------+-----+
+   | HTTP/1.1 Range Requests                    | [RFC7233] | B.5 |
+   +--------------------------------------------+-----------+-----+
+   | HTTP/1.1 Authentication                    | [RFC7235] | B.6 |
+   +--------------------------------------------+-----------+-----+
+   | HTTP Status Code 308 (Permanent Redirect)  | [RFC7538] | B.7 |
+   +--------------------------------------------+-----------+-----+
+   | HTTP Authentication-Info and Proxy-        | [RFC7615] | B.8 |
+   | Authentication-Info Response Header Fields |           |     |
+   +--------------------------------------------+-----------+-----+
+   | HTTP Client-Initiated Content-Encoding     | [RFC7694] | B.9 |
+   +--------------------------------------------+-----------+-----+
 
-                                 Table 1
+          Table 1: Specifications Obsoleted by This Document
 
    [*] This document only obsoletes the portions of RFC 7230 that are
    independent of the HTTP/1.1 messaging syntax and connection
@@ -547,8 +527,8 @@
    shows the collected grammar with all list operators expanded to
    standard ABNF notation.
 
-   As a convention, ABNF rule names prefixed with "obs-" denote obsolete
-   grammar rules that appear for historical reasons.
+   As a convention, ABNF rule names prefixed with "obs-" denote
+   "obsolete" grammar rules that appear for historical reasons.
 
    The following core rules are included by reference, as defined in
    Appendix B.1 of [RFC5234]: ALPHA (letters), CR (carriage return),
@@ -562,14 +542,14 @@
 
    This specification uses the terms "character", "character encoding
    scheme", "charset", and "protocol element" as they are defined in
-   Section 2 of [RFC6365].
+   [RFC6365].
 
 2.2.  Requirements Notation
 
    The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
    "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
-   "OPTIONAL" in this document are to be interpreted as described in BCP
-   14 [RFC2119] [RFC8174] when, and only when, they appear in all
+   "OPTIONAL" in this document are to be interpreted as described in
+   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
    capitals, as shown here.
 
    This specification targets conformance criteria according to the role
@@ -673,24 +653,24 @@
 2.5.  Protocol Version
 
    HTTP's version number consists of two decimal digits separated by a
-   "." (period or decimal point).  The first digit (major version)
-   indicates the messaging syntax, whereas the second digit (minor
-   version) indicates the highest minor version within that major
+   "." (period or decimal point).  The first digit ("major version")
+   indicates the messaging syntax, whereas the second digit ("minor
+   version") indicates the highest minor version within that major
    version to which the sender is conformant (able to understand for
    future communication).
 
    While HTTP's core semantics don't change between protocol versions,
-   their expression "on the wire" can change, and so the HTTP version
-   number changes when incompatible changes are made to the wire format.
-   Additionally, HTTP allows incremental, backwards-compatible changes
-   to be made to the protocol without changing its version through the
-   use of defined extension points (Section 16).
+   the expression of them "on the wire" can change, and so the HTTP
+   version number changes when incompatible changes are made to the wire
+   format.  Additionally, HTTP allows incremental, backwards-compatible
+   changes to be made to the protocol without changing its version
+   through the use of defined extension points (Section 16).
 
    The protocol version as a whole indicates the sender's conformance
    with the set of requirements laid out in that version's corresponding
-   specification.  For example, the version "HTTP/1.1" is defined by the
-   combined specifications of this document, "HTTP Caching" [CACHING],
-   and "HTTP/1.1" [HTTP/1.1].
+   specification of HTTP.  For example, the version "HTTP/1.1" is
+   defined by the combined specifications of this document, "HTTP
+   Caching" [CACHING], and "HTTP/1.1" [HTTP/1.1].
 
    HTTP's major version number is incremented when an incompatible
    message syntax is introduced.  The minor number is incremented when
@@ -716,7 +696,7 @@
 
 3.1.  Resources
 
-   The target of an HTTP request is called a resource.  HTTP does not
+   The target of an HTTP request is called a _resource_.  HTTP does not
    limit the nature of a resource; it merely defines an interface that
    might be used to interact with resources.  Most resources are
    identified by a Uniform Resource Identifier (URI), as described in
@@ -738,7 +718,7 @@
 
 3.2.  Representations
 
-   A representation is information that is intended to reflect a past,
+   A _representation_ is information that is intended to reflect a past,
    current, or desired state of a given resource, in a format that can
    be readily communicated via the protocol.  A representation consists
    of a set of representation metadata and a potentially unbounded
@@ -766,7 +746,7 @@
    reflect the resource's current state.  An algorithm, usually based on
    content negotiation (Section 12), would be used to select one of
    those representations as being most applicable to a given request.
-   This selected representation provides the data and metadata for
+   This _selected representation_ provides the data and metadata for
    evaluating conditional requests (Section 13) and constructing the
    content for 200 (OK), 206 (Partial Content), and 304 (Not Modified)
    responses to GET (Section 9.3.1).
@@ -774,14 +754,14 @@
 3.3.  Connections, Clients, and Servers
 
    HTTP is a client/server protocol that operates over a reliable
-   transport- or session-layer connection.
+   transport- or session-layer _connection_.
 
-   An HTTP client is a program that establishes a connection to a server
-   for the purpose of sending one or more HTTP requests.  An HTTP server
-   is a program that accepts connections in order to service HTTP
-   requests by sending HTTP responses.
+   An HTTP _client_ is a program that establishes a connection to a
+   server for the purpose of sending one or more HTTP requests.  An HTTP
+   _server_ is a program that accepts connections in order to service
+   HTTP requests by sending HTTP responses.
 
-   The terms client and server refer only to the roles that these
+   The terms "client" and "server" refer only to the roles that these
    programs perform for a particular connection.  The same program might
    act as a client on some connections and a server on others.
 
@@ -803,20 +783,21 @@
 
 3.4.  Messages
 
-   HTTP is a stateless request/response protocol for exchanging messages
-   across a connection.  The terms sender and recipient refer to any
-   implementation that sends or receives a given message, respectively.
-
-   A client sends requests to a server in the form of a request message
-   with a method (Section 9) and request target (Section 7.1).  The
-   request might also contain header fields (Section 6.3) for request
-   modifiers, client information, and representation metadata, content
-   (Section 6.4) intended for processing in accordance with the method,
-   and trailer fields (Section 6.5) to communicate information collected
-   while sending the content.
+   HTTP is a stateless request/response protocol for exchanging
+   _messages_ across a connection.  The terms _sender_ and _recipient_
+   refer to any implementation that sends or receives a given message,
+   respectively.
+
+   A client sends requests to a server in the form of a _request_
+   message with a method (Section 9) and request target (Section 7.1).
+   The request might also contain header fields (Section 6.3) for
+   request modifiers, client information, and representation metadata,
+   content (Section 6.4) intended for processing in accordance with the
+   method, and trailer fields (Section 6.5) to communicate information
+   collected while sending the content.
 
    A server responds to a client's request by sending one or more
-   response messages, each including a status code (Section 15).  The
+   _response_ messages, each including a status code (Section 15).  The
    response might also contain header fields for server information,
    resource metadata, and representation metadata, content to be
    interpreted in accordance with the status code, and trailer fields to
@@ -824,8 +805,8 @@
 
 3.5.  User Agents
 
-   The term user agent refers to any of the various client programs that
-   initiate a request.
+   The term _user agent_ refers to any of the various client programs
+   that initiate a request.
 
    The most familiar form of user agent is the general-purpose Web
    browser, but that's only a small percentage of implementations.
@@ -856,7 +837,7 @@
 
 3.6.  Origin Server
 
-   The term origin server refers to a program that can originate
+   The term _origin server_ refers to a program that can originate
    authoritative responses for a given target resource.
 
    The most familiar form of origin server are large public websites.
@@ -883,7 +864,7 @@
 
    HTTP enables the use of intermediaries to satisfy requests through a
    chain of connections.  There are three common forms of HTTP
-   intermediary: proxy, gateway, and tunnel.  In some cases, a single
+   _intermediary_: proxy, gateway, and tunnel.  In some cases, a single
    intermediary might act as an origin server, proxy, gateway, or
    tunnel, switching behavior based on the nature of each request.
 
@@ -907,14 +888,14 @@
    path of connections, often based on dynamic configuration for load
    balancing.
 
-   The terms upstream and downstream are used to describe directional
-   requirements in relation to the message flow: all messages flow from
-   upstream to downstream.  The terms inbound and outbound are used to
-   describe directional requirements in relation to the request route:
-   inbound means toward the origin server and outbound means toward the
-   user agent.
+   The terms _upstream_ and _downstream_ are used to describe
+   directional requirements in relation to the message flow: all
+   messages flow from upstream to downstream.  The terms "inbound" and
+   "outbound" are used to describe directional requirements in relation
+   to the request route: _inbound_ means toward the origin server and
+   _outbound_ means toward the user agent.
 
-   A proxy is a message-forwarding agent that is chosen by the client,
+   A _proxy_ is a message-forwarding agent that is chosen by the client,
    usually via local configuration rules, to receive requests for some
    type(s) of absolute URI and attempt to satisfy those requests via
    translation through the HTTP interface.  Some translations are
@@ -927,13 +908,13 @@
    messages or content while they are being forwarded, as described in
    Section 7.7.
 
-   A gateway (a.k.a. reverse proxy) is an intermediary that acts as an
-   origin server for the outbound connection but translates received
+   A _gateway_ (a.k.a. _reverse proxy_) is an intermediary that acts as
+   an origin server for the outbound connection but translates received
    requests and forwards them inbound to another server or servers.
    Gateways are often used to encapsulate legacy or untrusted
    information services, to improve server performance through
-   accelerator caching, and to enable partitioning or load balancing of
-   HTTP services across multiple machines.
+   _accelerator_ caching, and to enable partitioning or load balancing
+   of HTTP services across multiple machines.
 
    All HTTP requirements applicable to an origin server also apply to
    the outbound communication of a gateway.  A gateway communicates with
@@ -943,7 +924,7 @@
    third-party HTTP servers needs to conform to user agent requirements
    on the gateway's inbound connection.
 
-   A tunnel acts as a blind relay between two connections without
+   A _tunnel_ acts as a blind relay between two connections without
    changing the messages.  Once active, a tunnel is not considered a
    party to the HTTP communication, though the tunnel might have been
    initiated by an HTTP request.  A tunnel ceases to exist when both
@@ -961,18 +942,19 @@
    often introducing security flaws or interoperability problems due to
    mistakenly violating HTTP semantics.
 
-   For example, an interception proxy [RFC3040] (also commonly known as
-   a transparent proxy [RFC1919]) differs from an HTTP proxy because it
-   is not chosen by the client.  Instead, an interception proxy filters
-   or redirects outgoing TCP port 80 packets (and occasionally other
-   common port traffic).  Interception proxies are commonly found on
-   public network access points, as a means of enforcing account
-   subscription prior to allowing use of non-local Internet services,
-   and within corporate firewalls to enforce network usage policies.
+   For example, an _interception proxy_ [RFC3040] (also commonly known
+   as a _transparent proxy_ [RFC1919]) differs from an HTTP proxy
+   because it is not chosen by the client.  Instead, an interception
+   proxy filters or redirects outgoing TCP port 80 packets (and
+   occasionally other common port traffic).  Interception proxies are
+   commonly found on public network access points, as a means of
+   enforcing account subscription prior to allowing use of non-local
+   Internet services, and within corporate firewalls to enforce network
+   usage policies.
 
 3.8.  Caches
 
-   A cache is a local store of previous response messages and the
+   A _cache_ is a local store of previous response messages and the
    subsystem that controls its message storage, retrieval, and deletion.
    A cache stores cacheable responses in order to reduce the response
    time and network bandwidth consumption on future, equivalent
@@ -991,18 +973,18 @@
 
                                   Figure 3
 
-   A response is cacheable if a cache is allowed to store a copy of the
-   response message for use in answering subsequent requests.  Even when
-   a response is cacheable, there might be additional constraints placed
-   by the client or by the origin server on when that cached response
-   can be used for a particular request.  HTTP requirements for cache
-   behavior and cacheable responses are defined in [CACHING].
+   A response is _cacheable_ if a cache is allowed to store a copy of
+   the response message for use in answering subsequent requests.  Even
+   when a response is cacheable, there might be additional constraints
+   placed by the client or by the origin server on when that cached
+   response can be used for a particular request.  HTTP requirements for
+   cache behavior and cacheable responses are defined in [CACHING].
 
    There is a wide variety of architectures and configurations of caches
    deployed across the World Wide Web and inside large organizations.
    These include national hierarchies of proxy caches to save bandwidth
-   and reduce latency, Content Delivery Networks that use gateway
-   caching to optimise regional and global distribution of popular
+   and reduce latency, content delivery networks that use gateway
+   caching to optimize regional and global distribution of popular
    sites, collaborative systems that broadcast or multicast cache
    entries, archives of pre-fetched cache entries for use in off-line or
    high-latency environments, and so on.
@@ -1134,8 +1116,8 @@
    within the hierarchical namespace governed by a potential origin
    server listening for TCP connections on a given port and capable of
    establishing a TLS ([TLS13]) connection that has been secured for
-   HTTP communication.  In this context, secured specifically means that
-   the server has been authenticated as acting on behalf of the
+   HTTP communication.  In this context, _secured_ specifically means
+   that the server has been authenticated as acting on behalf of the
    identified authority and all HTTP communication with that server has
    confidentiality and integrity protection that is acceptable to both
    client and server.
@@ -1268,7 +1250,7 @@
 
 4.3.1.  URI Origin
 
-   The origin for a given URI is the triple of scheme, host, and port
+   The _origin_ for a given URI is the triple of scheme, host, and port
    after normalizing the scheme and host to lowercase and normalizing
    the port to remove any leading zeros.  If port is elided from the
    URI, the default port for that scheme is used.  For example, the URI
@@ -1289,7 +1271,7 @@
    origin responds to valid requests, consistently over time, determines
    the semantics that users will associate with a URI, and the
    usefulness of those semantics is what ultimately transforms these
-   mechanisms into a resource for users to reference and access in the
+   mechanisms into a "resource" for users to reference and access in the
    future.
 
    Two origins are distinct if they differ in scheme, host, or port.
@@ -1469,9 +1451,10 @@
 
 5.  Fields
 
-   HTTP uses fields to provide data in the form of extensible key/value
-   pairs with a registered key namespace.  Fields are sent and received
-   within the header and trailer sections of messages (Section 6).
+   HTTP uses _fields_ to provide data in the form of extensible key/
+   value pairs with a registered key namespace.  Fields are sent and
+   received within the header and trailer sections of messages
+   (Section 6).
 
 5.1.  Field Names
 
@@ -1508,12 +1491,12 @@
 
 5.2.  Field Lines and Combined Field Value
 
-   Field sections are composed of any number of field lines, each with a
-   field name (see Section 5.1) identifying the field, and a field line
-   value that conveys data for that instance of the field.
+   Field sections are composed of any number of _field lines_, each with
+   a _field name_ (see Section 5.1) identifying the field, and a _field
+   line value_ that conveys data for that instance of the field.
 
    When a field name is only present once in a section, the combined
-   field value for that field consists of the corresponding field line
+   _field value_ for that field consists of the corresponding field line
    value.  When a field name is repeated within a section, its combined
    field value consists of the list of corresponding field line values
    within that section, concatenated in order, with each field line
@@ -1632,10 +1615,10 @@
    downstream HTTP parser).
 
    Fields that only anticipate a single member as the field value are
-   referred to as singleton fields.
+   referred to as _singleton fields_.
 
    Fields that allow multiple members as the field value are referred to
-   as list-based fields.  The list operator extension of Section 5.6.1
+   as _list-based fields_. The list operator extension of Section 5.6.1
    is used as a common notation for defining field values that can
    contain multiple members.
 
@@ -1880,7 +1863,7 @@
    predecessor of the UTC name; values in the asctime format are assumed
    to be in UTC.
 
-   A clock is an implementation capable of providing a reasonable
+   A _clock_ is an implementation capable of providing a reasonable
    approximation of the current instant in UTC.  A clock implementation
    ought to use NTP ([RFC5905]), or some similar protocol, to
    synchronize with UTC.
@@ -1948,10 +1931,10 @@
    HTTP source that might generate any of the date and time
    specifications defined by the Internet Message Format.
 
-      |  *Note:* HTTP requirements for the date/time format apply only
-      |  to their usage within the protocol stream.  Implementations are
-      |  not required to use these formats for user presentation,
-      |  request logging, etc.
+      |  *Note:* HTTP requirements for the date/timestamp format apply
+      |  only to their usage within the protocol stream.
+      |  Implementations are not required to use these formats for user
+      |  presentation, request logging, etc.
 
 6.  Message Abstraction
 
@@ -1964,12 +1947,12 @@
    version can be relayed through other versions without changing its
    meaning.
 
-   A message consists of control data to describe and route the message,
-   a headers lookup table of key/value pairs for extending that control
-   data and conveying additional information about the sender, message,
-   content, or context, a potentially unbounded stream of content, and a
-   trailers lookup table of key/value pairs for communicating
-   information obtained while sending the content.
+   A _message_ consists of control data to describe and route the
+   message, a headers lookup table of key/value pairs for extending that
+   control data and conveying additional information about the sender,
+   message, content, or context, a potentially unbounded stream of
+   content, and a trailers lookup table of key/value pairs for
+   communicating information obtained while sending the content.
 
    Framing and control data is sent first, followed by a header section
    containing fields for the headers table.  When a message includes
@@ -1986,15 +1969,16 @@
    semantics, and trailer fields provide optional metadata that was
    unknown prior to sending the content.
 
-   Messages are intended to be self-descriptive: everything a recipient
-   needs to know about the message can be determined by looking at the
-   message itself, after decoding or reconstituting parts that have been
-   compressed or elided in transit, without requiring an understanding
-   of the sender's current application state (established via prior
-   messages).  However, a client MUST retain knowledge of the request
-   when parsing, interpreting, or caching a corresponding response.  For
-   example, responses to the HEAD method look just like the beginning of
-   a response to GET but cannot be parsed in the same manner.
+   Messages are intended to be _self-descriptive_: everything a
+   recipient needs to know about the message can be determined by
+   looking at the message itself, after decoding or reconstituting parts
+   that have been compressed or elided in transit, without requiring an
+   understanding of the sender's current application state (established
+   via prior messages).  However, a client MUST retain knowledge of the
+   request when parsing, interpreting, or caching a corresponding
+   response.  For example, responses to the HEAD method look just like
+   the beginning of a response to GET but cannot be parsed in the same
+   manner.
 
    Note that this message abstraction is a generalization across many
    versions of HTTP, including features that might not be found in some
@@ -2018,8 +2002,8 @@
    modern implementations use explicit framing in the form of length-
    delimited sequences of message data.
 
-   A message is considered complete when all of the octets indicated by
-   its framing are available.  Note that, when no explicit framing is
+   A message is considered _complete_ when all of the octets indicated
+   by its framing are available.  Note that, when no explicit framing is
    used, a response message that is ended by the underlying connection's
    close is considered complete even though it might be
    indistinguishable from an incomplete response, unless a transport-
@@ -2083,7 +2067,7 @@
    Fields (Section 5) that are sent or received before the content are
    referred to as "header fields" (or just "headers", colloquially).
 
-   The header section of a message consists of a sequence of header
+   The _header section_ of a message consists of a sequence of header
    field lines.  Each header field might modify or extend message
    semantics, describe the sender, define the content, or provide
    additional context.
@@ -2095,7 +2079,7 @@
 6.4.  Content
 
    HTTP messages often transfer a complete or partial representation as
-   the message content: a stream of octets sent after the header
+   the message _content_: a stream of octets sent after the header
    section, as delineated by the message framing.
 
    This abstract definition of content reflects the data after it has
@@ -2218,7 +2202,7 @@
 
 6.5.  Trailer Fields
 
-   Fields (Section 5) that are located within a trailer section are
+   Fields (Section 5) that are located within a _trailer section_ are
    referred to as "trailer fields" (or just "trailers", colloquially).
    Trailer fields can be useful for supplying message integrity checks,
    digital signatures, delivery metrics, or post-processing status
@@ -2386,15 +2370,15 @@
    their combined effect as a URI reference (Section 4.1).
 
    A URI reference is resolved to its absolute form in order to obtain
-   the target URI.  The target URI excludes the reference's fragment
+   the _target URI_. The target URI excludes the reference's fragment
    component, if any, since fragment identifiers are reserved for
    client-side processing ([URI], Section 3.5).
 
-   To perform an action on a target resource, the client sends a request
-   message containing enough components of its parsed target URI to
-   enable recipients to identify that same resource.  For historical
+   To perform an action on a _target resource_, the client sends a
+   request message containing enough components of its parsed target URI
+   to enable recipients to identify that same resource.  For historical
    reasons, the parsed target URI components, collectively referred to
-   as the request target, are sent within the message control data and
+   as the _request target_, are sent within the message control data and
    the Host header field (Section 7.2).
 
    There are two unusual cases for which the request target components
@@ -2417,7 +2401,7 @@
    HTTP/1.1 request.
 
       |  *Note:* Previous specifications defined the recomposed target
-      |  URI as a distinct concept, the effective request URI.
+      |  URI as a distinct concept, the _effective request URI_.
 
 7.2.  Host and :authority
 
@@ -2608,7 +2592,7 @@
 
    Furthermore, intermediaries SHOULD remove or replace field(s) whose
    semantics are known to require removal before forwarding, whether or
-   not they appear as a Connection option, after applying those fields'
+   not they appear as a connection option, after applying those fields'
    semantics.  This includes but is not limited to:
 
    *  Proxy-Connection (Appendix C.2.2 of [HTTP/1.1])
@@ -2765,7 +2749,7 @@
    are used to ensure that the content received is identical to the
    original.
 
-   An HTTP-to-HTTP proxy is called a transforming proxy if it is
+   An HTTP-to-HTTP proxy is called a _transforming proxy_ if it is
    designed or configured to modify messages in a semantically
    meaningful way (i.e., modifications, beyond those required by normal
    HTTP processing, that change the message in a way that would be
@@ -2790,7 +2774,7 @@
    (Section 3.2.4 of [HTTP/1.1]), depending on the request method.
 
    A proxy MUST NOT transform the content (Section 6.4) of a response
-   message that contains a "no-transform" cache response directive
+   message that contains a "no-transform" cache directive
    (Section 5.2.2.6 of [CACHING]).  Note that this does not apply to
    message transformations that do not change the content, such as the
    addition or removal of transfer codings (Section 7 of [HTTP/1.1]).
@@ -3017,8 +3001,8 @@
 
 8.3.2.  Charset
 
-   HTTP uses charset names to indicate or negotiate the character
-   encoding scheme ([RFC6365], Section 2) of a textual representation.
+   HTTP uses _charset_ names to indicate or negotiate the character
+   encoding scheme ([RFC6365], Section 1.3) of a textual representation.
    In the fields defined by this document, charset names appear either
    in parameters (Content-Type), or, for Accept-Encoding, in the form of
    a plain token.  In both cases, charset names are matched case-
@@ -3373,7 +3357,7 @@
 
 8.8.  Validator Fields
 
-   Resource metadata is referred to as a validator if it can be used
+   Resource metadata is referred to as a _validator_ if it can be used
    within a precondition (Section 13.1) to make a conditional request
    (Section 13).  Validator fields convey a current validator for the
    selected representation (Section 3.2).
@@ -3412,7 +3396,7 @@
    HTTP exposes the type of validator in use and imposes restrictions on
    when weak validators can be used as preconditions.
 
-   A strong validator is representation metadata that changes value
+   A _strong validator_ is representation metadata that changes value
    whenever a change occurs to the representation data that would be
    observable in the content of a 200 (OK) response to GET.
 
@@ -3447,7 +3431,7 @@
    format, then the origin server needs to incorporate additional
    information in the validator to distinguish those representations.
 
-   In contrast, a weak validator is representation metadata that might
+   In contrast, a _weak validator_ is representation metadata that might
    not change for every change to the representation data.  This
    weakness might be due to limitations in how the value is calculated
    (e.g., clock resolution), an inability to ensure uniqueness for all
@@ -3657,12 +3641,12 @@
    There are two entity-tag comparison functions, depending on whether
    or not the comparison context allows the use of weak validators:
 
-   Strong comparison:  two entity-tags are equivalent if both are not
+   _Strong comparison_:  two entity-tags are equivalent if both are not
       weak and their opaque-tags match character-by-character.
 
-   Weak comparison:  two entity-tags are equivalent if their opaque-tags
-      match character-by-character, regardless of either or both being
-      tagged as "weak".
+   _Weak comparison_:  two entity-tags are equivalent if their opaque-
+      tags match character-by-character, regardless of either or both
+      being tagged as "weak".
 
    The example below shows the results for a set of entity-tag pairs and
    both the weak and strong comparison function results:
@@ -3823,7 +3807,7 @@
 
 9.2.1.  Safe Methods
 
-   Request methods are considered safe if their defined semantics are
+   Request methods are considered _safe_ if their defined semantics are
    essentially read-only; i.e., the client does not request, and does
    not expect, any state change on the origin server as a result of
    applying a safe method to a target resource.  Likewise, reasonable
@@ -3871,7 +3855,7 @@
 
 9.2.2.  Idempotent Methods
 
-   A request method is considered idempotent if the intended effect on
+   A request method is considered _idempotent_ if the intended effect on
    the server of multiple identical requests with that method is the
    same as the effect for a single such request.  Of the request methods
    defined by this specification, PUT, DELETE, and safe request methods
@@ -4130,7 +4114,7 @@
        of the resource before saving it as the new resource state; or,
 
    c.  reject the request with a 415 (Unsupported Media Type) response
-       indicating that the target resource is limited to "text/html",
+       indicating that the target resource is limited to text/html,
        perhaps including a link to a different resource that would be a
        suitable target for the new representation.
 
@@ -4443,7 +4427,7 @@
    status code to indicate that the unexpected expectation cannot be
    met.
 
-   A 100-continue expectation informs recipients that the client is
+   A _100-continue_ expectation informs recipients that the client is
    about to send (presumably large) content in this request and wishes
    to receive a 100 (Continue) interim response if the method, target
    URI, and header fields are not sufficient to cause an immediate
@@ -4542,7 +4526,7 @@
 
    An example is:
 
-   From: spider-admin@example.org
+   From: webmaster@example.org
 
    The From header field is rarely sent by non-robotic user agents.  A
    user agent SHOULD NOT send a From header field without explicit
@@ -4872,7 +4856,7 @@
    specified independently and ought to be registered within the
    "Hypertext Transfer Protocol (HTTP) Authentication Scheme Registry".
    For example, the "basic" and "digest" authentication schemes are
-   defined by RFC 7617 and RFC 7616, respectively.
+   defined by RFC 7617 [RFC7617] and RFC 7616 [RFC7616], respectively.
 
 11.2.  Authentication Parameters
 
@@ -4980,10 +4964,10 @@
 
 11.5.  Establishing a Protection Space (Realm)
 
-   The realm authentication parameter is reserved for use by
+   The _realm_ authentication parameter is reserved for use by
    authentication schemes that wish to indicate a scope of protection.
 
-   A protection space is defined by the origin (see Section 4.3.1) of
+   A _protection space_ is defined by the origin (see Section 4.3.1) of
    the server being accessed, in combination with the realm value if
    present.  These realms allow the protected resources on a server to
    be partitioned into a set of protection spaces, each with its own
@@ -5219,19 +5203,20 @@
 
    When content negotiation preferences are sent by the user agent in a
    request to encourage an algorithm located at the server to select the
-   preferred representation, it is called proactive negotiation (a.k.a.,
-   server-driven negotiation).  Selection is based on the available
-   representations for a response (the dimensions over which it might
-   vary, such as language, content coding, etc.) compared to various
-   information supplied in the request, including both the explicit
-   negotiation header fields below and implicit characteristics, such as
-   the client's network address or parts of the User-Agent field.
+   preferred representation, it is called _proactive negotiation_
+   (a.k.a., _server-driven negotiation_).  Selection is based on the
+   available representations for a response (the dimensions over which
+   it might vary, such as language, content coding, etc.) compared to
+   various information supplied in the request, including both the
+   explicit negotiation header fields below and implicit
+   characteristics, such as the client's network address or parts of the
+   User-Agent field.
 
    Proactive negotiation is advantageous when the algorithm for
    selecting from among the available representations is difficult to
    describe to a user agent, or when the server desires to send its
    "best guess" to the user agent along with the first response (when
-   that "best guess" is good enough for the user, this avoids the round
+   that "best guess" is good enough for the user, this avoids the round-
    trip delay of a subsequent request).  In order to improve the
    server's guess, a user agent MAY send request header fields that
    describe its preferences.
@@ -5274,7 +5259,7 @@
 
 12.2.  Reactive Negotiation
 
-   With reactive negotiation (a.k.a., agent-driven negotiation),
+   With _reactive negotiation_ (a.k.a., _agent-driven negotiation_),
    selection of content (regardless of the status code) is performed by
    the user agent after receiving an initial response.  The mechanism
    for reactive negotiation might be as simple as a list of references
@@ -5311,9 +5296,9 @@
 12.3.  Request Content Negotiation
 
    When content negotiation preferences are sent in a server's response,
-   the listed preferences are called request content negotiation because
-   they intend to influence selection of an appropriate content for
-   subsequent requests to that resource.  For example, the Accept
+   the listed preferences are called _request content negotiation_
+   because they intend to influence selection of an appropriate content
+   for subsequent requests to that resource.  For example, the Accept
    (Section 12.5.1) and Accept-Encoding (Section 12.5.3) header fields
    can be sent in a response to indicate preferred media types and
    content codings for subsequent requests to that resource.
@@ -5577,11 +5562,10 @@
 
    An Accept-Encoding header field with a field value that is empty
    implies that the user agent does not want any content coding in
-   response.  If a non-empty Accept-Encoding header field is present in
-   a request and none of the available representations for the response
-   have a content coding that is listed as acceptable, the origin server
-   SHOULD send a response without any content coding unless the identity
-   coding is indicated as unacceptable.
+   response.  If an Accept-Encoding header field is present in a request
+   and none of the available representations for the response have a
+   content coding that is listed as acceptable, the origin server SHOULD
+   send a response without any content coding.
 
    When the Accept-Encoding header field is present in a response, it
    indicates what content codings the resource was willing to accept in
@@ -5844,7 +5828,7 @@
    many authoring use cases, but comes with some risk if multiple user
    agents are making change requests that are very similar but not
    cooperative.  For example, multiple user agents writing to a common
-   resource as a semaphore (e.g., a non-atomic increment) are likely to
+   resource as a semaphore (e.g., a nonatomic increment) are likely to
    collide and potentially lose important state transitions.  For those
    kinds of resources, an origin server is better off being stringent in
    sending 412 for every failed precondition on an unsafe method.  In
@@ -6207,9 +6191,9 @@
 
    Note that protocol extensions can modify the conditions under which
    preconditions are evaluated or the consequences of their evaluation.
-   For example, the "immutable" Cache-Control directive (defined by
-   [RFC8246]) instructs caches to forgo forwarding conditional requests
-   when they hold a fresh response.
+   For example, the "immutable" cache directive (defined by [RFC8246])
+   instructs caches to forgo forwarding conditional requests when they
+   hold a fresh response.
 
    Although conditional request header fields are defined as being
    usable with the HEAD method (to keep HEAD's semantics consistent with
@@ -6313,7 +6297,7 @@
    partitions of the data to be identified as a range of bytes at some
    offset from the start or end of that data.
 
-   This general notion of a range unit is used in the Accept-Ranges
+   This general notion of a _range unit_ is used in the Accept-Ranges
    (Section 14.3) response header field to advertise support for range
    requests, the Range (Section 14.2) request header field to delineate
    the parts of a representation that are requested, and the
@@ -6702,9 +6686,9 @@
        "multipart/x-byteranges", which is almost (but not quite)
        compatible with this type.
 
-   Despite the name, the "multipart/byteranges" media type is not
-   limited to byte ranges.  The following example uses an "exampleunit"
-   range unit:
+   Despite the name, the multipart/byteranges media type is not limited
+   to byte ranges.  The following example uses an "exampleunit" range
+   unit:
 
    HTTP/1.1 206 Partial Content
    Date: Tue, 14 Nov 1995 06:25:24 GMT
@@ -6757,8 +6741,8 @@
 
                             Macintosh file type code(s):  N/A
 
-   Person and email address to contact for further information:  See Aut
-      hors' Addresses section.
+   Person and email address to contact for further information:
+      See Authors' Addresses section
 
    Intended usage:  COMMON
 
@@ -6814,8 +6798,8 @@
    process the response as if it had a 5xx (Server Error) status code.
 
    A single request can have multiple associated responses: zero or more
-   interim (non-final) responses with status codes in the
-   "informational" (1xx) range, followed by exactly one final response
+   _interim_ (non-final) responses with status codes in the
+   "informational" (1xx) range, followed by exactly one _final_ response
    with a status code in one of the other ranges.
 
 15.1.  Overview of Status Codes
@@ -6839,7 +6823,7 @@
 
 15.2.  Informational 1xx
 
-   The 1xx (Informational) class of status code indicates an interim
+   The _1xx (Informational)_ class of status code indicates an interim
    response for communicating connection status or request progress
    prior to completing the requested action and sending a final
    response.  Since HTTP/1.0 did not define any 1xx status codes, a
@@ -6859,7 +6843,7 @@
 
 15.2.1.  100 Continue
 
-   The 100 (Continue) status code indicates that the initial part of a
+   The _100 (Continue)_ status code indicates that the initial part of a
    request has been received and has not yet been rejected by the
    server.  The server intends to send a final response after the
    request has been fully received and acted upon.
@@ -6876,7 +6860,7 @@
 
 15.2.2.  101 Switching Protocols
 
-   The 101 (Switching Protocols) status code indicates that the server
+   The _101 (Switching Protocols)_ status code indicates that the server
    understands and is willing to comply with the client's request, via
    the Upgrade header field (Section 7.8), for a change in the
    application protocol being used on this connection.  The server MUST
@@ -6891,12 +6875,12 @@
 
 15.3.  Successful 2xx
 
-   The 2xx (Successful) class of status code indicates that the client's
-   request was successfully received, understood, and accepted.
+   The _2xx (Successful)_ class of status code indicates that the
+   client's request was successfully received, understood, and accepted.
 
 15.3.1.  200 OK
 
-   The 200 (OK) status code indicates that the request has succeeded.
+   The _200 (OK)_ status code indicates that the request has succeeded.
    The content sent in a 200 response depends on the request method.
    For the methods defined by this specification, the intended meaning
    of the content can be summarized as:
@@ -6927,8 +6911,8 @@
    contain message content unless the message framing explicitly
    indicates that the content has zero length.  If some aspect of the
    request indicates a preference for no content upon success, the
-   origin server ought to send a 204 (No Content) response instead.  For
-   CONNECT, there is no content because the successful result is a
+   origin server ought to send a _204 (No Content)_ response instead.
+   For CONNECT, there is no content because the successful result is a
    tunnel, which begins immediately after the 200 response header
    section.
 
@@ -6949,7 +6933,7 @@
 
 15.3.2.  201 Created
 
-   The 201 (Created) status code indicates that the request has been
+   The _201 (Created)_ status code indicates that the request has been
    fulfilled and has resulted in one or more new resources being
    created.  The primary resource created by the request is identified
    by either a Location header field in the response or, if no Location
@@ -6963,7 +6947,7 @@
 
 15.3.3.  202 Accepted
 
-   The 202 (Accepted) status code indicates that the request has been
+   The _202 (Accepted)_ status code indicates that the request has been
    accepted for processing, but the processing has not been completed.
    The request might or might not eventually be acted upon, as it might
    be disallowed when processing actually takes place.  There is no
@@ -6981,7 +6965,7 @@
 
 15.3.4.  203 Non-Authoritative Information
 
-   The 203 (Non-Authoritative Information) status code indicates that
+   The _203 (Non-Authoritative Information)_ status code indicates that
    the request was successful but the enclosed content has been modified
    from that of the origin server's 200 (OK) response by a transforming
    proxy (Section 7.7).  This status code allows the proxy to notify
@@ -6996,7 +6980,7 @@
 
 15.3.5.  204 No Content
 
-   The 204 (No Content) status code indicates that the server has
+   The _204 (No Content)_ status code indicates that the server has
    successfully fulfilled the request and that there is no additional
    content to send in the response content.  Metadata in the response
    header fields refer to the target resource and its selected
@@ -7030,7 +7014,7 @@
 
 15.3.6.  205 Reset Content
 
-   The 205 (Reset Content) status code indicates that the server has
+   The _205 (Reset Content)_ status code indicates that the server has
    fulfilled the request and desires that the user agent reset the
    "document view", which caused the request to be sent, to its original
    state as received from the origin server.
@@ -7047,7 +7031,7 @@
 
 15.3.7.  206 Partial Content
 
-   The 206 (Partial Content) status code indicates that the server is
+   The _206 (Partial Content)_ status code indicates that the server is
    successfully fulfilling a range request for the target resource by
    transferring one or more parts of the selected representation.
 
@@ -7106,7 +7090,7 @@
 15.3.7.2.  Multiple Parts
 
    If multiple parts are being transferred, the server generating the
-   206 response MUST generate "multipart/byteranges" content, as defined
+   206 response MUST generate multipart/byteranges content, as defined
    in Section 14.6, and a Content-Type header field containing the
    multipart/byteranges media type and its required boundary parameter.
    To avoid confusion with single-part responses, a server MUST NOT
@@ -7211,7 +7195,7 @@
 
 15.4.  Redirection 3xx
 
-   The 3xx (Redirection) class of status code indicates that further
+   The _3xx (Redirection)_ class of status code indicates that further
    action needs to be taken by the user agent in order to fulfill the
    request.  There are several types of redirects:
 
@@ -7303,7 +7287,7 @@
 
 15.4.1.  300 Multiple Choices
 
-   The 300 (Multiple Choices) status code indicates that the target
+   The _300 (Multiple Choices)_ status code indicates that the target
    resource has more than one representation, each with its own more
    specific identifier, and information about the alternatives is being
    provided so that the user (or user agent) can select a preferred
@@ -7346,7 +7330,7 @@
 
 15.4.2.  301 Moved Permanently
 
-   The 301 (Moved Permanently) status code indicates that the target
+   The _301 (Moved Permanently)_ status code indicates that the target
    resource has been assigned a new permanent URI and any future
    references to this resource ought to use one of the enclosed URIs.
    The server is suggesting that a user agent with link-editing
@@ -7374,7 +7358,7 @@
 
 15.4.3.  302 Found
 
-   The 302 (Found) status code indicates that the target resource
+   The _302 (Found)_ status code indicates that the target resource
    resides temporarily under a different URI.  Since the redirection
    might be altered on occasion, the client ought to continue to use the
    target URI for future requests.
@@ -7392,7 +7376,7 @@
 
 15.4.4.  303 See Other
 
-   The 303 (See Other) status code indicates that the server is
+   The _303 (See Other)_ status code indicates that the server is
    redirecting the user agent to a different resource, as indicated by a
    URI in the Location header field, which is intended to provide an
    indirect response to the original request.  A user agent can perform
@@ -7425,7 +7409,7 @@
 
 15.4.5.  304 Not Modified
 
-   The 304 (Not Modified) status code indicates that a conditional GET
+   The _304 (Not Modified)_ status code indicates that a conditional GET
    or HEAD request has been received and would have resulted in a 200
    (OK) response if it were not for the fact that the condition
    evaluated to false.  In other words, there is no need for the server
@@ -7458,8 +7442,9 @@
 
 15.4.6.  305 Use Proxy
 
-   The 305 (Use Proxy) status code was defined in a previous version of
-   this specification and is now deprecated (Appendix B of [RFC7231]).
+   The _305 (Use Proxy)_ status code was defined in a previous version
+   of this specification and is now deprecated (Appendix B of
+   [RFC7231]).
 
 15.4.7.  306 (Unused)
 
@@ -7468,7 +7453,7 @@
 
 15.4.8.  307 Temporary Redirect
 
-   The 307 (Temporary Redirect) status code indicates that the target
+   The _307 (Temporary Redirect)_ status code indicates that the target
    resource resides temporarily under a different URI and the user agent
    MUST NOT change the request method if it performs an automatic
    redirection to that URI.  Since the redirection can change over time,
@@ -7483,7 +7468,7 @@
 
 15.4.9.  308 Permanent Redirect
 
-   The 308 (Permanent Redirect) status code indicates that the target
+   The _308 (Permanent Redirect)_ status code indicates that the target
    resource has been assigned a new permanent URI and any future
    references to this resource ought to use one of the enclosed URIs.
    The server is suggesting that a user agent with link-editing
@@ -7510,27 +7495,28 @@
 
 15.5.  Client Error 4xx
 
-   The 4xx (Client Error) class of status code indicates that the client
-   seems to have erred.  Except when responding to a HEAD request, the
-   server SHOULD send a representation containing an explanation of the
-   error situation, and whether it is a temporary or permanent
-   condition.  These status codes are applicable to any request method.
-   User agents SHOULD display any included representation to the user.
+   The _4xx (Client Error)_ class of status code indicates that the
+   client seems to have erred.  Except when responding to a HEAD
+   request, the server SHOULD send a representation containing an
+   explanation of the error situation, and whether it is a temporary or
+   permanent condition.  These status codes are applicable to any
+   request method.  User agents SHOULD display any included
+   representation to the user.
 
 15.5.1.  400 Bad Request
 
-   The 400 (Bad Request) status code indicates that the server cannot or
-   will not process the request due to something that is perceived to be
-   a client error (e.g., malformed request syntax, invalid request
+   The _400 (Bad Request)_ status code indicates that the server cannot
+   or will not process the request due to something that is perceived to
+   be a client error (e.g., malformed request syntax, invalid request
    message framing, or deceptive request routing).
 
 15.5.2.  401 Unauthorized
 
-   The 401 (Unauthorized) status code indicates that the request has not
-   been applied because it lacks valid authentication credentials for
-   the target resource.  The server generating a 401 response MUST send
-   a WWW-Authenticate header field (Section 11.6.1) containing at least
-   one challenge applicable to the target resource.
+   The _401 (Unauthorized)_ status code indicates that the request has
+   not been applied because it lacks valid authentication credentials
+   for the target resource.  The server generating a 401 response MUST
+   send a WWW-Authenticate header field (Section 11.6.1) containing at
+   least one challenge applicable to the target resource.
 
    If the request included authentication credentials, then the 401
    response indicates that authorization has been refused for those
@@ -7543,14 +7529,14 @@
 
 15.5.3.  402 Payment Required
 
-   The 402 (Payment Required) status code is reserved for future use.
+   The _402 (Payment Required)_ status code is reserved for future use.
 
 15.5.4.  403 Forbidden
 
-   The 403 (Forbidden) status code indicates that the server understood
-   the request but refuses to fulfill it.  A server that wishes to make
-   public why the request has been forbidden can describe that reason in
-   the response content (if any).
+   The _403 (Forbidden)_ status code indicates that the server
+   understood the request but refuses to fulfill it.  A server that
+   wishes to make public why the request has been forbidden can describe
+   that reason in the response content (if any).
 
    If authentication credentials were provided in the request, the
    server considers them insufficient to grant access.  The client
@@ -7565,9 +7551,9 @@
 
 15.5.5.  404 Not Found
 
-   The 404 (Not Found) status code indicates that the origin server did
-   not find a current representation for the target resource or is not
-   willing to disclose that one exists.  A 404 status code does not
+   The _404 (Not Found)_ status code indicates that the origin server
+   did not find a current representation for the target resource or is
+   not willing to disclose that one exists.  A 404 status code does not
    indicate whether this lack of representation is temporary or
    permanent; the 410 (Gone) status code is preferred over 404 if the
    origin server knows, presumably through some configurable means, that
@@ -7579,7 +7565,7 @@
 
 15.5.6.  405 Method Not Allowed
 
-   The 405 (Method Not Allowed) status code indicates that the method
+   The _405 (Method Not Allowed)_ status code indicates that the method
    received in the request-line is known by the origin server but not
    supported by the target resource.  The origin server MUST generate an
    Allow header field in a 405 response containing a list of the target
@@ -7591,7 +7577,7 @@
 
 15.5.7.  406 Not Acceptable
 
-   The 406 (Not Acceptable) status code indicates that the target
+   The _406 (Not Acceptable)_ status code indicates that the target
    resource does not have a current representation that would be
    acceptable to the user agent, according to the proactive negotiation
    header fields received in the request (Section 12.1), and the server
@@ -7607,8 +7593,8 @@
 
 15.5.8.  407 Proxy Authentication Required
 
-   The 407 (Proxy Authentication Required) status code is similar to 401
-   (Unauthorized), but it indicates that the client needs to
+   The _407 (Proxy Authentication Required)_ status code is similar to
+   401 (Unauthorized), but it indicates that the client needs to
    authenticate itself in order to use a proxy for this request.  The
    proxy MUST send a Proxy-Authenticate header field (Section 11.7.1)
    containing a challenge applicable to that proxy for the request.  The
@@ -7617,7 +7603,7 @@
 
 15.5.9.  408 Request Timeout
 
-   The 408 (Request Timeout) status code indicates that the server did
+   The _408 (Request Timeout)_ status code indicates that the server did
    not receive a complete request message within the time that it was
    prepared to wait.
 
@@ -7628,7 +7614,7 @@
 
 15.5.10.  409 Conflict
 
-   The 409 (Conflict) status code indicates that the request could not
+   The _409 (Conflict)_ status code indicates that the request could not
    be completed due to a conflict with the current state of the target
    resource.  This code is used in situations where the user might be
    able to resolve the conflict and resubmit the request.  The server
@@ -7645,7 +7631,7 @@
 
 15.5.11.  410 Gone
 
-   The 410 (Gone) status code indicates that access to the target
+   The _410 (Gone)_ status code indicates that access to the target
    resource is no longer available at the origin server and that this
    condition is likely to be permanent.  If the origin server does not
    know, or has no facility to determine, whether or not the condition
@@ -7668,7 +7654,7 @@
 
 15.5.12.  411 Length Required
 
-   The 411 (Length Required) status code indicates that the server
+   The _411 (Length Required)_ status code indicates that the server
    refuses to accept the request without a defined Content-Length
    (Section 8.6).  The client MAY repeat the request if it adds a valid
    Content-Length header field containing the length of the request
@@ -7676,19 +7662,19 @@
 
 15.5.13.  412 Precondition Failed
 
-   The 412 (Precondition Failed) status code indicates that one or more
-   conditions given in the request header fields evaluated to false when
-   tested on the server (Section 13).  This response status code allows
-   the client to place preconditions on the current resource state (its
-   current representations and metadata) and, thus, prevent the request
-   method from being applied if the target resource is in an unexpected
-   state.
+   The _412 (Precondition Failed)_ status code indicates that one or
+   more conditions given in the request header fields evaluated to false
+   when tested on the server (Section 13).  This response status code
+   allows the client to place preconditions on the current resource
+   state (its current representations and metadata) and, thus, prevent
+   the request method from being applied if the target resource is in an
+   unexpected state.
 
 15.5.14.  413 Content Too Large
 
-   The 413 (Content Too Large) status code indicates that the server is
-   refusing to process a request because the request content is larger
-   than the server is willing or able to process.  The server MAY
+   The _413 (Content Too Large)_ status code indicates that the server
+   is refusing to process a request because the request content is
+   larger than the server is willing or able to process.  The server MAY
    terminate the request, if the protocol version in use allows it;
    otherwise, the server MAY close the connection.
 
@@ -7698,15 +7684,14 @@
 
 15.5.15.  414 URI Too Long
 
-   The 414 (URI Too Long) status code indicates that the server is
+   The _414 (URI Too Long)_ status code indicates that the server is
    refusing to service the request because the target URI is longer than
    the server is willing to interpret.  This rare condition is only
    likely to occur when a client has improperly converted a POST request
    to a GET request with long query information, when the client has
-   descended into an infinite loop of redirection (e.g., a redirected
-   URI prefix that points to a suffix of itself), or when the server is
-   under attack by a client attempting to exploit potential security
-   holes.
+   descended into a "black hole" of redirection (e.g., a redirected URI
+   prefix that points to a suffix of itself) or when the server is under
+   attack by a client attempting to exploit potential security holes.
 
    A 414 response is heuristically cacheable; i.e., unless otherwise
    indicated by the method definition or explicit cache controls (see
@@ -7714,7 +7699,7 @@
 
 15.5.16.  415 Unsupported Media Type
 
-   The 415 (Unsupported Media Type) status code indicates that the
+   The _415 (Unsupported Media Type)_ status code indicates that the
    origin server is refusing to service the request because the content
    is in a format not supported by this method on the target resource.
 
@@ -7733,8 +7718,8 @@
 
 15.5.17.  416 Range Not Satisfiable
 
-   The 416 (Range Not Satisfiable) status code indicates that the set of
-   ranges in the request's Range header field (Section 14.2) has been
+   The _416 (Range Not Satisfiable)_ status code indicates that the set
+   of ranges in the request's Range header field (Section 14.2) has been
    rejected either because none of the requested ranges are satisfiable
    or because the client has requested an excessive number of small or
    overlapping ranges (a potential denial of service attack).
@@ -7765,7 +7750,7 @@
 
 15.5.18.  417 Expectation Failed
 
-   The 417 (Expectation Failed) status code indicates that the
+   The _417 (Expectation Failed)_ status code indicates that the
    expectation given in the request's Expect header field
    (Section 10.1.1) could not be met by at least one of the inbound
    servers.
@@ -7778,21 +7763,21 @@
    has been widely implemented as an "Easter egg" and therefore is
    effectively consumed by this use.
 
-   Therefore, the 418 status code is reserved in the IANA HTTP Status
-   Code Registry.  This indicates that the status code cannot be
-   assigned to other applications currently.  If future circumstances
-   require its use (e.g., exhaustion of 4NN status codes), it can be re-
-   assigned to another use.
+   Therefore, the 418 status code is reserved in the IANA "Hypertext
+   Transfer Protocol (HTTP) Status Code Registry".  This indicates that
+   the status code cannot be assigned to other applications currently.
+   If future circumstances require its use (e.g., exhaustion of 4NN
+   status codes), it can be re-assigned to another use.
 
 15.5.20.  421 Misdirected Request
 
-   The 421 (Misdirected Request) status code indicates that the request
-   was directed at a server that is unable or unwilling to produce an
-   authoritative response for the target URI.  An origin server (or
-   gateway acting on behalf of the origin server) sends 421 to reject a
-   target URI that does not match an origin for which the server has
-   been configured (Section 4.3.1) or does not match the connection
-   context over which the request was received (Section 7.4).
+   The _421 (Misdirected Request)_ status code indicates that the
+   request was directed at a server that is unable or unwilling to
+   produce an authoritative response for the target URI.  An origin
+   server (or gateway acting on behalf of the origin server) sends 421
+   to reject a target URI that does not match an origin for which the
+   server has been configured (Section 4.3.1) or does not match the
+   connection context over which the request was received (Section 7.4).
 
    A client that receives a 421 (Misdirected Request) response MAY retry
    the request, whether or not the request method is idempotent, over a
@@ -7803,9 +7788,9 @@
 
 15.5.21.  422 Unprocessable Content
 
-   The 422 (Unprocessable Content) status code indicates that the server
-   understands the content type of the request content (hence a 415
-   (Unsupported Media Type) status code is inappropriate), and the
+   The _422 (Unprocessable Content)_ status code indicates that the
+   server understands the content type of the request content (hence a
+   415 (Unsupported Media Type) status code is inappropriate), and the
    syntax of the request content is correct, but it was unable to
    process the contained instructions.  For example, this status code
    can be sent if an XML request content contains well-formed (i.e.,
@@ -7813,7 +7798,7 @@
 
 15.5.22.  426 Upgrade Required
 
-   The 426 (Upgrade Required) status code indicates that the server
+   The _426 (Upgrade Required)_ status code indicates that the server
    refuses to perform the request using the current protocol but might
    be willing to do so after the client upgrades to a different
    protocol.  The server MUST send an Upgrade header field in a 426
@@ -7831,8 +7816,8 @@
 
 15.6.  Server Error 5xx
 
-   The 5xx (Server Error) class of status code indicates that the server
-   is aware that it has erred or is incapable of performing the
+   The _5xx (Server Error)_ class of status code indicates that the
+   server is aware that it has erred or is incapable of performing the
    requested method.  Except when responding to a HEAD request, the
    server SHOULD send a representation containing an explanation of the
    error situation, and whether it is a temporary or permanent
@@ -7842,16 +7827,17 @@
 
 15.6.1.  500 Internal Server Error
 
-   The 500 (Internal Server Error) status code indicates that the server
-   encountered an unexpected condition that prevented it from fulfilling
-   the request.
+   The _500 (Internal Server Error)_ status code indicates that the
+   server encountered an unexpected condition that prevented it from
+   fulfilling the request.
 
 15.6.2.  501 Not Implemented
 
-   The 501 (Not Implemented) status code indicates that the server does
-   not support the functionality required to fulfill the request.  This
-   is the appropriate response when the server does not recognize the
-   request method and is not capable of supporting it for any resource.
+   The _501 (Not Implemented)_ status code indicates that the server
+   does not support the functionality required to fulfill the request.
+   This is the appropriate response when the server does not recognize
+   the request method and is not capable of supporting it for any
+   resource.
 
    A 501 response is heuristically cacheable; i.e., unless otherwise
    indicated by the method definition or explicit cache controls (see
@@ -7859,13 +7845,13 @@
 
 15.6.3.  502 Bad Gateway
 
-   The 502 (Bad Gateway) status code indicates that the server, while
+   The _502 (Bad Gateway)_ status code indicates that the server, while
    acting as a gateway or proxy, received an invalid response from an
    inbound server it accessed while attempting to fulfill the request.
 
 15.6.4.  503 Service Unavailable
 
-   The 503 (Service Unavailable) status code indicates that the server
+   The _503 (Service Unavailable)_ status code indicates that the server
    is currently unable to handle the request due to a temporary overload
    or scheduled maintenance, which will likely be alleviated after some
    delay.  The server MAY send a Retry-After header field
@@ -7878,14 +7864,14 @@
 
 15.6.5.  504 Gateway Timeout
 
-   The 504 (Gateway Timeout) status code indicates that the server,
+   The _504 (Gateway Timeout)_ status code indicates that the server,
    while acting as a gateway or proxy, did not receive a timely response
    from an upstream server it needed to access in order to complete the
    request.
 
 15.6.6.  505 HTTP Version Not Supported
 
-   The 505 (HTTP Version Not Supported) status code indicates that the
+   The _505 (HTTP Version Not Supported)_ status code indicates that the
    server does not support, or refuses to support, the major version of
    HTTP that was used in the request message.  The server is indicating
    that it is unable or unwilling to complete the request using the same
@@ -7900,7 +7886,7 @@
    introduce capabilities to the protocol without introducing a new
    version, including methods, status codes, field names, and further
    extensibility points within defined fields, such as authentication
-   schemes and Cache-Control directives (see Cache-Control extensions in
+   schemes and cache directives (see Cache-Control extensions in
    Section 5.2.3 of [CACHING]).  Because the semantics of HTTP are not
    versioned, these extension points are persistent; the version of the
    protocol in use does not affect their semantics.
@@ -8049,8 +8035,8 @@
    information; however, those status codes that are defined as being
    heuristically cacheable are allowed to be cached without explicit
    freshness information.  Likewise, the definition of a status code can
-   place constraints upon cache behavior if the "must-understand" Cache-
-   Control directive is used.  See [CACHING] for more information.
+   place constraints upon cache behavior if the "must-understand" cache
+   directive is used.  See [CACHING] for more information.
 
    Finally, the definition of a new status code ought to indicate
    whether the content has any implied association with an identified
@@ -8122,12 +8108,12 @@
    registry, in consultation with the community.
 
    Standards-defined names have a status of "permanent".  Other names
-   can also be registered as permanent if the expert(s) finds that they
+   can also be registered as permanent if the expert(s) find that they
    are in use, in consultation with the community.  Other names should
    be registered as "provisional".
 
    Provisional entries can be removed by the expert(s) if -- in
-   consultation with the community -- the expert(s) find that they are
+   consultation with the community -- the expert(s) finds that they are
    not in use.  The expert(s) can change a provisional entry's status to
    permanent at any time.
 
@@ -8138,7 +8124,7 @@
 
 16.3.2.  Considerations for New Fields
 
-   HTTP header and trailer fields are a widely used extension point for
+   HTTP header and trailer fields are widely used extension points for
    the protocol.  While they can be used in an ad hoc fashion, fields
    that are intended for wider use need to be carefully documented to
    ensure interoperability.
@@ -8461,7 +8447,7 @@
 
 17.1.  Establishing Authority
 
-   HTTP relies on the notion of an authoritative response: a response
+   HTTP relies on the notion of an _authoritative response_: a response
    that has been determined by (or at the direction of) the origin
    server identified within the target URI to be the most appropriate
    response for that request given the state of the target resource at
@@ -8503,7 +8489,7 @@
    or the distrusted response can be safely used.
 
    Unfortunately, communicating authority to users can be difficult.
-   For example, phishing is an attack on the user's perception of
+   For example, _phishing_ is an attack on the user's perception of
    authority, where that perception can be misled by presenting similar
    branding in hypertext, possibly aided by userinfo obfuscating the
    authority component (see Section 4.2.1).  User agents can reduce the
@@ -8950,7 +8936,7 @@
 18.  IANA Considerations
 
    The change controller for the following registrations is: "IETF
-   (iesg@ietf.org) - Internet Engineering Task Force".
+   (iesg@ietf.org) -- Internet Engineering Task Force".
 
 18.1.  URI Scheme Registration
 
@@ -9258,24 +9244,24 @@
    registration procedure of Section 16.6.1 and the content coding names
    summarized in the table below.
 
-   +============+=========================================+=========+
-   | Name       | Description                             | Ref.    |
-   +============+=========================================+=========+
-   | compress   | UNIX "compress" data format [Welch]     | 8.4.1.1 |
-   +------------+-----------------------------------------+---------+
-   | deflate    | "deflate" compressed data [RFC1951]     | 8.4.1.2 |
-   |            | inside the "zlib" data format [RFC1950] |         |
-   +------------+-----------------------------------------+---------+
-   | gzip       | GZIP file format [RFC1952]              | 8.4.1.3 |
-   +------------+-----------------------------------------+---------+
-   | identity   | Reserved                                | 12.5.3  |
-   +------------+-----------------------------------------+---------+
-   | x-compress | Deprecated (alias for compress)         | 8.4.1.1 |
-   +------------+-----------------------------------------+---------+
-   | x-gzip     | Deprecated (alias for gzip)             | 8.4.1.3 |
-   +------------+-----------------------------------------+---------+
+   +============+===========================================+=========+
+   | Name       | Description                               | Ref.    |
+   +============+===========================================+=========+
+   | compress   | UNIX "compress" data format [Welch]       | 8.4.1.1 |
+   +------------+-------------------------------------------+---------+
+   | deflate    | "deflate" compressed data ([RFC1951])     | 8.4.1.2 |
+   |            | inside the "zlib" data format ([RFC1950]) |         |
+   +------------+-------------------------------------------+---------+
+   | gzip       | GZIP file format [RFC1952]                | 8.4.1.3 |
+   +------------+-------------------------------------------+---------+
+   | identity   | Reserved                                  | 12.5.3  |
+   +------------+-------------------------------------------+---------+
+   | x-compress | Deprecated (alias for compress)           | 8.4.1.1 |
+   +------------+-------------------------------------------+---------+
+   | x-gzip     | Deprecated (alias for gzip)               | 8.4.1.3 |
+   +------------+-------------------------------------------+---------+
 
-                                Table 10
+                                 Table 10
 
 18.7.  Range Unit Registration
 
@@ -9338,10 +9324,8 @@
 19.1.  Normative References
 
    [CACHING]  Fielding, R., Ed., Nottingham, M., Ed., and J. Reschke,
-              Ed., "HTTP Caching", Work in Progress, Internet-Draft,
-              draft-ietf-httpbis-cache-latest, January 2022,
-              <https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-
-              cache-latest>.
+              Ed., "HTTP Caching", RFC 9111, DOI 10.17487/RFC9111,
+              January 2022, <https://www.rfc-editor.org/info/rfc9111>.
 
    [RFC1950]  Deutsch, P. and J-L. Gailly, "ZLIB Compressed Data Format
               Specification version 3.3", RFC 1950,
@@ -9441,15 +9425,10 @@
               Alternative Services", RFC 7838, DOI 10.17487/RFC7838,
               April 2016, <https://www.rfc-editor.org/info/rfc7838>.
 
-   [BCP13]    Freed, N. and J. Klensin, "Multipurpose Internet Mail
-              Extensions (MIME) Part Four: Registration Procedures",
-              BCP 13, RFC 4289, December 2005.
-
-              Freed, N., Klensin, J., and T. Hansen, "Media Type
+   [BCP13]    Freed, N., Klensin, J., and T. Hansen, "Media Type
               Specifications and Registration Procedures", BCP 13,
-              RFC 6838, January 2013.
-
-              <https://www.rfc-editor.org/info/bcp13>
+              RFC 6838, January 2013,
+              <https://www.rfc-editor.org/info/bcp13>.
 
    [BCP178]   Saint-Andre, P., Crocker, D., and M. Nottingham,
               "Deprecating the "X-" Prefix and Similar Constructs in
@@ -9502,10 +9481,8 @@
               <https://www.rfc-editor.org/info/rfc1945>.
 
    [HTTP/1.1] Fielding, R., Ed., Nottingham, M., Ed., and J. Reschke,
-              Ed., "HTTP/1.1", Work in Progress, Internet-Draft, draft-
-              ietf-httpbis-messaging-latest, January 2022,
-              <https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-
-              messaging-latest>.
+              Ed., "HTTP/1.1", RFC 9112, DOI 10.17487/RFC9112, January
+              2022, <https://www.rfc-editor.org/info/rfc9112>.
 
    [HTTP/2]   Belshe, M., Peon, R., and M. Thomson, Ed., "Hypertext
               Transfer Protocol Version 2 (HTTP/2)", RFC 7540,
@@ -9513,10 +9490,8 @@
               <https://www.rfc-editor.org/info/rfc7540>.
 
    [HTTP/3]   Bishop, M., Ed., "Hypertext Transfer Protocol Version 3
-              (HTTP/3)", Work in Progress, Internet-Draft, draft-ietf-
-              quic-http-34, 2 February 2021,
-              <https://datatracker.ietf.org/doc/html/draft-ietf-quic-
-              http-34>.
+              (HTTP/3)", RFC 9113, DOI 10.17487/RFC9113, January 2022,
+              <https://www.rfc-editor.org/info/rfc9113>.
 
    [ISO-8859-1]
               International Organization for Standardization,
@@ -10019,8 +9994,8 @@
    recommended.  (Section 3.1)
 
    The following have been clarified: CR and NUL in field values are to
-   be rejected or mapped to SP, and leading and trailing whitespace
-   needs to be stripped from field values before they are consumed.
+   be rejected or mapped to SP, and leading and trailing whitespaces
+   need to be stripped from field values before they are consumed.
    (Section 5.5)
 
    Parameters in media type, media range, and expectation can be empty
@@ -10056,8 +10031,8 @@
    A superfluous requirement about setting Content-Length has been
    removed from the description of the OPTIONS method.  (Section 9.3.7)
 
-   The normative requirement to use the "message/http" media type in
-   TRACE responses has been removed.  (Section 9.3.8)
+   The normative requirement to use the message/http media type in TRACE
+   responses has been removed.  (Section 9.3.8)
 
    List-based grammar for Expect has been restored for compatibility
    with RFC 2616.  (Section 10.1.1)
@@ -10153,30 +10128,6 @@
    This specification includes the extension defined in [RFC7694] but
    leaves out examples and deployment considerations.
 
-Appendix C.  Change Log
-
-   This section is to be removed before publishing as an RFC.
-
-   See <https://www.ietf.org/archive/id/draft-ietf-httpbis-semantics-
-   19.html#appendix-C> for changes up to version 19 of this document.
-
-C.1.  Since draft-ietf-httpbis-semantics-19
-
-   This (unpublished) draft contains changes that were made after draft
-   19 was approved by the IESG.  Most changes are editorial only.
-   Furthermore:
-
-   *  In Section 16.3.1, add states 'obsoleted' and 'deprecated'; in
-      Section 18.4, change status 'standard' to 'permanent'
-      (<https://github.com/httpwg/http-core/issues/978>)
-
-   *  In Section 12.5.3, slightly relax requirements for handling
-      Accept-Encoding field values (<https://github.com/httpwg/http-
-      core/issues/980>)
-
-   *  In Section 18.4, update IANA instructions based on received
-      feedback (<https://github.com/httpwg/http-core/issues/982>)
-
 Acknowledgements
 
    Aside from the current editors, the following individuals deserve
@@ -10190,11 +10141,13 @@
    Henrik Frystyk Nielsen, Dave Raggett, Eric Rescorla, Tony Sanders,
    Lawrence C. Stewart, Marc VanHeyningen, and Steve Zilles.
 
-   This edition builds on the many contributions that went into past
-   specifications of HTTP, including RFC 1945, RFC 2068, RFC 2145, RFC
-   2616, RFC 2617, RFC 2818, RFC 7230, RFC 7231, RFC 7232, RFC 7233, RFC
-   7234, and RFC 7235.  The acknowledgements within those documents
-   still apply.
+   This document builds on the many contributions that went into past
+   specifications of HTTP, including RFC 1945 [HTTP/1.0], RFC 2068
+   [RFC2068], RFC 2145 [RFC2145], RFC 2616 [RFC2616], RFC 2617
+   [RFC2617], RFC 2818 [RFC2818], RFC 7230 [RFC7230], RFC 7231
+   [RFC7231], RFC 7232 [RFC7232], RFC 7233 [RFC7233], RFC 7234
+   [RFC7234], and RFC 7235 [RFC7235].  The acknowledgements within those
+   documents still apply.
 
    Since 2014, the following contributors have helped improve this
    specification by reporting bugs, asking smart questions, drafting or
@@ -10721,12 +10674,11 @@
 
          TE header field  Section 10.1.4
          TRACE method  Section 9.3.8
-         Trailer Fields
+         Trailer Fields  Section 6.5
             ETag  Section 8.8.3
          Trailer header field  Section 6.6.2
          target URI  Section 7.1
          target resource  Section 7.1
-         trailer fields  Section 6.5
          trailer section  Section 6.5
          trailers  Section 6.5
          transforming proxy  Section 7.7
